<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python自动化打包部署</title>
      <link href="/2020/04/12/python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/04/12/python%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基于python实现前端项目打包部署，使用方法：</p><ol><li>本地安装python环境，并且配置好环境变量，不会的<a href="https://www.runoob.com/python3/python3-install.html" target="_blank" rel="noopener">点我</a></li><li>在本地新建auto.py然后粘贴进以下脚本，然后修改顶部注释部分的相关参数</li><li>打开命令行工具，cd到auto.py所在目录，然后python auto.py回车执行脚本</li><li>按照提示输入服务器登录密码，回车</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># —————————————————————此处配置打包相关参数———————————————————————</span></span><br><span class="line"><span class="comment"># 本地项目目录</span></span><br><span class="line">project_path = <span class="string">r'E:\projects\cloud-music'</span></span><br><span class="line"><span class="comment"># 项目打包后的目录，一般为dist或者build</span></span><br><span class="line">build_path = <span class="string">'build'</span></span><br><span class="line"><span class="comment"># 服务器目录</span></span><br><span class="line">remote_path = <span class="string">r'/www/cloud-music'</span></span><br><span class="line"><span class="comment"># 服务器地址</span></span><br><span class="line">hostname = <span class="string">'192.168.1.225'</span></span><br><span class="line"><span class="comment"># 登陆服务器的用户名</span></span><br><span class="line">username = <span class="string">'fuck'</span></span><br><span class="line"><span class="comment"># ————————————————————————配置结束—————————————————————————————</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSHConnect</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个私有变量，用来保存ssh连接通道，初始化为None</span></span><br><span class="line">    __transport = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化构造函数（主机，用户名，密码，端口，默认22）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hostname, username, password, port=<span class="number">22</span>)</span>:</span></span><br><span class="line">        self.hostname = hostname</span><br><span class="line">        self.port = port</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line">        <span class="comment"># 创建 ssh 连接通道</span></span><br><span class="line">        self.connect()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建立ssh 连接通道，并绑定在 __transport 上</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 设置SSH 连接的远程主机地址和端口</span></span><br><span class="line">            self.__transport = paramiko.Transport((self.hostname, self.port))</span><br><span class="line">            <span class="comment"># 通过用户名和密码连接SSH服务端</span></span><br><span class="line">            self.__transport.connect(username=self.username, password=self.password)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 连接出错</span></span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行linux命令</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exec</span><span class="params">(self, command)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建 ssh 客户端</span></span><br><span class="line">        ssh = paramiko.SSHClient()</span><br><span class="line">        <span class="comment"># 指定连接的通道</span></span><br><span class="line">        ssh._transport = self.__transport</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开一个Channel并执行命令, 调用 exec_command 方法执行命令</span></span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取命令结果，返回是二进制，需要编码一下</span></span><br><span class="line">        res = stdout.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 获取错误信息</span></span><br><span class="line">        error = stderr.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果没出错</span></span><br><span class="line">        <span class="keyword">if</span> error.strip():</span><br><span class="line">            <span class="comment"># 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> error</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 返回结果</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端打包（入参work_path为项目目录）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(self, work_path)</span>:</span></span><br><span class="line">        <span class="comment"># 开始打包</span></span><br><span class="line">        print(<span class="string">'_______________________________________________'</span>)</span><br><span class="line">        print(<span class="string">'正在打包...'</span>)</span><br><span class="line">        <span class="comment"># 打包命令</span></span><br><span class="line">        cmd = <span class="string">'npm run build'</span></span><br><span class="line">        <span class="comment"># 切换到需要项目目录</span></span><br><span class="line">        os.chdir(work_path)</span><br><span class="line">        <span class="comment"># 当前项目目录下执行打包命令</span></span><br><span class="line">        <span class="keyword">if</span> os.system(cmd) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 打包完成</span></span><br><span class="line">            print(<span class="string">'打包完成！'</span>)</span><br><span class="line">            print(<span class="string">'开始上传文件...'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 文件上传</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self, local_path, target_path)</span>:</span></span><br><span class="line">        <span class="comment"># 判断路径问题</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(local_path):</span><br><span class="line">            <span class="keyword">return</span> print(<span class="string">'local path is not exist'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 实例化一个 sftp 对象,指定连接的通道</span></span><br><span class="line">        sftp = paramiko.SFTPClient.from_transport(self.__transport)</span><br><span class="line">        <span class="comment"># 打包后的文件路径</span></span><br><span class="line">        local_path = os.path.join(local_path, build_path)</span><br><span class="line">        <span class="comment"># 本地路径转换，将windows下的 \ 转成 /</span></span><br><span class="line">        local_path = <span class="string">'/'</span>.join(local_path.split(<span class="string">'\\'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归上传文件</span></span><br><span class="line">        self.upload_file(sftp, local_path, target_path)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Everything is ok,Have a nice day!'</span>)</span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归上传文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">(self, sftp, local_path, target_path)</span>:</span></span><br><span class="line">        <span class="comment"># 判断当前路径是否是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(local_path):</span><br><span class="line">            <span class="comment"># 如果是文件，获取文件名</span></span><br><span class="line">            file_name = os.path.basename(local_path)</span><br><span class="line">            <span class="comment"># 检查服务器文件夹是否存在</span></span><br><span class="line">            self.check_remote_dir(sftp, target_path)</span><br><span class="line">            <span class="comment"># 服务器创建文件</span></span><br><span class="line">            target_file_path = os.path.join(target_path, file_name).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br><span class="line">            <span class="comment"># 上传到服务器</span></span><br><span class="line">            sftp.put(local_path, target_file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 查看当前文件夹下的子文件</span></span><br><span class="line">            file_list = os.listdir(local_path)</span><br><span class="line">            <span class="comment"># 遍历子文件</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> file_list:</span><br><span class="line">                <span class="comment"># 拼接当前文件路径</span></span><br><span class="line">                current_local_path = os.path.join(local_path, p).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br><span class="line">                <span class="comment"># 拼接服务器文件路径</span></span><br><span class="line">                current_target_path = os.path.join(target_path, p).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br><span class="line">                <span class="comment"># 如果已经是文件，服务器就不需要创建文件夹了</span></span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(current_local_path):</span><br><span class="line">                    <span class="comment"># 提取当前文件所在的文件夹</span></span><br><span class="line">                    current_target_path = os.path.split(current_target_path)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 递归判断</span></span><br><span class="line">                self.upload_file(sftp, current_local_path, current_target_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建服务器文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_remote_dir</span><span class="params">(self, sftp, target_path)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 判断文件夹是否存在</span></span><br><span class="line">            sftp.stat(target_path)</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            <span class="comment"># 创建文件夹</span></span><br><span class="line">            self.exec(<span class="string">r'mkdir -p %s '</span> % target_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自动化打包部署</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auto_deploy</span><span class="params">(self, local_path, target_path)</span>:</span></span><br><span class="line">        <span class="comment"># 打包构建</span></span><br><span class="line">        self.build(local_path)</span><br><span class="line">        <span class="comment"># 清空文件</span></span><br><span class="line">        self.clear_remote_dir(target_path)</span><br><span class="line">        <span class="comment"># 文件上传</span></span><br><span class="line">        self.upload(local_path, target_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_remote_dir</span><span class="params">(self, target_path)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> target_path[<span class="number">-1</span>] == <span class="string">'/'</span>:</span><br><span class="line">            cmd = <span class="string">f'rm -rf <span class="subst">&#123;target_path&#125;</span>*'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmd = <span class="string">f'rm -rf <span class="subst">&#123;target_path&#125;</span>/*'</span></span><br><span class="line">        self.exec(cmd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__transport.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 销毁实例</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__transport.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 实例化</span></span><br><span class="line">    password = input(<span class="string">"请输入服务器连接密码："</span>)</span><br><span class="line">    ssh = SSHConnect(hostname=hostname, username=username, password=password)</span><br><span class="line">    <span class="comment"># 自动打包部署</span></span><br><span class="line">    ssh.auto_deploy(project_path, remote_path)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 部署 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2实现自动化部署</title>
      <link href="/2020/03/01/pm2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/03/01/pm2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>基于git，使用node的pm2实现项目的自动化部署，服务器环境以centos为例</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>因为是基于git和node，所以本机和部署项目的服务器都需要安装node和git，然后安装pm2<br>本地环境比较简单，不赘述，centos下可以借助yum来安装<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br><span class="line"><span class="comment"># 装完以后继续安装pm2，本地环境同理</span></span><br><span class="line">npm install pm2 -g</span><br><span class="line"><span class="comment"># 接下来安装git</span></span><br><span class="line">yum install -y git</span><br><span class="line"><span class="comment"># 安装完以后可以git -v查看版本</span></span><br></pre></td></tr></table></figure></div></p><h2 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h2><p>这一步是为了让本地计算机、github、服务器之间建立连接，因此本机和部署项目的服务器都需要添加ssh，这个比较简单，不会的可以参考<a href="https://www.runoob.com/w3cnote/git-guide.html" target="_blank" rel="noopener">Github 简明教程</a></p><h2 id="添加pm2配置文件"><a href="#添加pm2配置文件" class="headerlink" title="添加pm2配置文件"></a>添加pm2配置文件</h2><p>在本地项目根目录添加ecosystem.json<br>！！！注意：因为是json格式，实际使用请删除注释<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"apps"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"app"</span>, <span class="comment">// 项目名称</span></span><br><span class="line">            <span class="string">"script"</span>: <span class="string">"app.js"</span>, <span class="comment">// 入口文件</span></span><br><span class="line">            <span class="string">"env"</span>: &#123;</span><br><span class="line">                <span class="string">"COMMON_VARIABLE"</span>: <span class="string">"true"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"env_production"</span>: &#123;</span><br><span class="line">                <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span> <span class="comment">// 环境变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 环境部署的配置</span></span><br><span class="line">    <span class="string">"deploy"</span>: &#123;</span><br><span class="line">        <span class="string">"production"</span>: &#123;</span><br><span class="line">            <span class="comment">// 登录服务器的用户名</span></span><br><span class="line">            <span class="string">"user"</span>:<span class="string">"slevin"</span>,</span><br><span class="line">            <span class="comment">// 服务器ip</span></span><br><span class="line">            <span class="string">"host"</span>: [<span class="string">"12.34.56.78"</span>],</span><br><span class="line">            <span class="comment">// 服务器ssh登录端口，未修改的话一般默认为22</span></span><br><span class="line">            <span class="string">"port"</span>: <span class="string">"22"</span>,</span><br><span class="line">            <span class="comment">// 指定拉取的分支</span></span><br><span class="line">            <span class="string">"ref"</span>: <span class="string">"origin/master"</span>,</span><br><span class="line">            <span class="comment">// 远程仓库地址</span></span><br><span class="line">            <span class="string">"repo"</span>: <span class="string">"git@github.com:yourName/xxx.git"</span>,</span><br><span class="line">            <span class="comment">// 指定代码拉取到服务器的目录</span></span><br><span class="line">            <span class="string">"path"</span>: <span class="string">"/home/projects/xxx"</span>,</span><br><span class="line">            <span class="string">"ssh_options"</span>: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">            <span class="string">"env"</span>: &#123;</span><br><span class="line">                <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="本地push与服务器端pull"><a href="#本地push与服务器端pull" class="headerlink" title="本地push与服务器端pull"></a>本地push与服务器端pull</h2><ol><li>github上创建仓库，比如xxx</li><li><p>在本地项目根目录执行以下命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># 初始化仓库</span></span><br><span class="line">git commit -m <span class="string">"init project"</span> <span class="comment"># 添加提交信息</span></span><br><span class="line">git remote add origin git@github.com:yourName/xxx.git <span class="comment"># 指定remote地址</span></span><br><span class="line">git push -u origin master <span class="comment"># 推送</span></span><br></pre></td></tr></table></figure></div></li><li><p>在服务器端</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/projects/</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:yourName/xxx.git <span class="comment"># 克隆github项目，(非node项目略过下面2步)</span></span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line">npm install <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure></div></li></ol><p>ps：以上步骤首次操作可能会提示你输入github登陆密码</p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 deploy ecosystem.json production setup <span class="comment"># 首次部署执行一次即可</span></span><br><span class="line">pm2 deploy ecosystem.json production</span><br></pre></td></tr></table></figure></div><p>后续开发中，提交本地代码到remote后，只需要执行pm2 deploy ecosystem.json production即可</p><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><ol><li>提示bash: pm2: command not found post-deploy hook failed Deploy failed 1<br>即是：找不到pm2命令，解决办法，添加pm2的软链接，在服务器端执行：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找pm2的路径</span></span><br><span class="line">whereis pm2</span><br><span class="line"><span class="comment"># pm2: /usr/bin/pm2 /root/node/bin/pm2，添加软连接</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">sudo ln -s [查找到的链接] /usr/bin/pm2</span><br><span class="line"><span class="comment"># 即是： sudo ln -s /usr/bin/pm2 /root/node/bin/pm2 /usr/bin/pm2</span></span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pm2 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React状态逻辑复用</title>
      <link href="/2020/02/15/React%E7%8A%B6%E6%80%81%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/"/>
      <url>/2020/02/15/React%E7%8A%B6%E6%80%81%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h1><h2 id="关于Mixin"><a href="#关于Mixin" class="headerlink" title="关于Mixin"></a>关于Mixin</h2><p>Mixin（混入）是一种通过扩展收集功能的方式，它本质上是将一个对象的属性拷贝到另一个对象上面去，不过你可以拷贝任意多个对象的任意方法到一个新对象上去，这是继承所不能实现的。它的出现主要就是为了解决代码复用问题。 写一个简单的Mixin方法：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMixin</span>(<span class="params">target, mixin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">2</span>]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">      target.prototype[<span class="built_in">arguments</span>[i]] = mixin.prototype[<span class="built_in">arguments</span>[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> methodName <span class="keyword">in</span> mixin.prototype) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Object</span>.hasOwnProperty(target.prototype, methodName)) &#123;</span><br><span class="line">        target.prototype[methodName] = mixin.prototype[methodName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setMixin(User,LogMixin,<span class="string">'actionLog'</span>);</span><br><span class="line">setMixin(Goods,LogMixin,<span class="string">'requestLog'</span>);</span><br></pre></td></tr></table></figure></div></p><h2 id="Mixin应用"><a href="#Mixin应用" class="headerlink" title="Mixin应用"></a>Mixin应用</h2><p>React也提供了Mixin的实现，如果完全不同的组件有相似的功能，我们可以引入来实现代码复用，当然只有在使用createClass来创建React组件时才可以使用，因为在React组件的es6写法中它已经被废弃掉了。<br>例如下面的例子，很多组件或页面都需要记录用户行为，性能指标等。如果我们在每个组件都引入写日志的逻辑，会产生大量重复代码，通过Mixin我们可以解决这一问题：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LogMixin = &#123;</span><br><span class="line">  log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'log'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'in'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'out'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = React.createClass(&#123;</span><br><span class="line">  mixins: [LogMixin],</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Goods = React.createClass(&#123;</span><br><span class="line">  mixins: [LogMixin],</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>Mixin 可能会相互依赖，相互耦合，不利于代码维护</li><li>不同的Mixin中的方法可能会相互冲突</li><li>Mixin非常多时，组件是可以感知到的，甚至还要为其做相关处理，这样会给代码造成滚雪球式的复杂性</li></ol><h1 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h1><h2 id="关于HOC"><a href="#关于HOC" class="headerlink" title="关于HOC"></a>关于HOC</h2><p> 高阶组件可以看作React对装饰模式的一种实现，高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。 HOC是React中的高级技术，用来重用组件逻辑。但高阶组件本身并不是React API。它只是一种模式，这种模式是由React自身的组合性质必然产生的<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visible</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; visible, ...props &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">if</span> (visible === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p> 上面的代码就是一个HOC的简单应用，函数接收一个组件作为参数，并返回一个新组件，新组建可以接收一个visible props，根据visible的值来判断是否渲染Visible。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h3><p>函数返回一个我们自己定义的组件，然后在render中返回要包裹的组件，这样我们就可以代理所有传入的props，并且决定如何渲染，实际上 ，这种方式生成的高阶组件就是原组件的父组件，上面的函数visible就是一个HOC属性代理的实现方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对比原生组件增强的项：</p><ul><li>可操作所有传入的props</li><li>可操作组件的生命周期</li><li>可操作组件的static方法</li><li>获取refs</li></ul><h3 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h3><p>返回一个组件，继承原组件，在render中调用原组件的render。由于继承了原组件，能通过this访问到原组件的生命周期、props、state、render等，相比属性代理它能操作更多的属性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对比原生组件增强的项：</p><ul><li>可操作所有传入的props</li><li>可操作组件的生命周期</li><li>可操作组件的static方法</li><li>获取refs</li><li>可操作state</li><li>可以渲染劫持</li></ul><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="组合渲染"><a href="#组合渲染" class="headerlink" title="组合渲染"></a>组合渲染</h3><p>可使用任何其他组件和原组件进行组合渲染，达到样式、布局复用等效果。</p><ul><li><p>通过属性代理实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stylHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"title"</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>通过反向继承实现</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"title"</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;super.render()&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><ul><li><p>通过属性代理实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibleHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>通过反向继承实现</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibleHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="操作props"><a href="#操作props" class="headerlink" title="操作props"></a>操作props</h3><p>可以对传入组件的props进行增加、修改、删除或者根据特定的props进行特殊的操作。</p><ul><li>通过属性代理实现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        ...this.props,</span><br><span class="line">        user: <span class="string">'ConardLi'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...newProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="获取refs"><a href="#获取refs" class="headerlink" title="获取refs"></a>获取refs</h3><p>高阶组件中可获取原组件的ref，通过ref获取组件实力，如下面的代码，当程序初始化完成后调用原组件的log方法</p><ul><li>通过属性代理实现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.wapperRef.log()</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref</span> =&gt;</span> &#123; this.wapperRef = ref &#125;&#125; /&gt;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><p>将原组件的状态提取到HOC中进行管理，如下面的代码，我们将Input的value提取到HOC中进行管理，使它变成受控组件，同时不影响它使用onChange方法进行一些其他操作。基于这种方式，我们可以实现一个简单的双向绑定，具体请看双向绑定。</p><ul><li>通过属性代理实现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyHoc</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">value</span>: <span class="string">''</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onChange &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        value: event.target.value,</span><br><span class="line">      &#125;, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> onChange ===<span class="string">'function'</span>)&#123;</span><br><span class="line">          onChange(event);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.state.value,</span><br><span class="line">        onChange: <span class="keyword">this</span>.onChange,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> proxyHoc(HOC);</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="操作state"><a href="#操作state" class="headerlink" title="操作state"></a>操作state</h3><p>上面的例子通过属性代理利用HOC的state对原组件进行了一定的增强，但并不能直接控制原组件的state，而通过反向继承，我们可以直接操作原组件的state。但是并不推荐直接修改或添加原组件的state，因为这样有可能和组件内部的操作构成冲突。</p><ul><li>通过反向继承实现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'props'</span>, <span class="keyword">this</span>.props);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'state'</span>, <span class="keyword">this</span>.state);</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"debuging"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">super</span>.render()&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div></li></ul><p>上面的HOC在render中将props和state打印出来，可以用作调试阶段，当然你可以在里面写更多的调试代码。想象一下，只需要在我们想要调试的组件上加上@debug就可以对该组件进行调试，而不需要在每次调试的时候写很多冗余代码。(如果你还不知道怎么使用HOC，请👇如何使用HOC)</p><h3 id="渲染劫持"><a href="#渲染劫持" class="headerlink" title="渲染劫持"></a>渲染劫持</h3><p>高阶组件可以在render函数中做非常多的操作，从而控制原组件的渲染输出。只要改变了原组件的渲染，我们都将它称之为一种渲染劫持。<br>实际上，上面的组合渲染和条件渲染都是渲染劫持的一种，通过反向继承，不仅可以实现以上两点，还可直接增强由原组件render函数产生的React元素。</p><ul><li>通过反向继承实现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hijackHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> tree = <span class="keyword">super</span>.render();</span><br><span class="line">      <span class="keyword">let</span> newProps = &#123;&#125;;</span><br><span class="line">      <span class="keyword">if</span> (tree &amp;&amp; tree.type === <span class="string">'input'</span>) &#123;</span><br><span class="line">        newProps = &#123; <span class="attr">value</span>: <span class="string">'渲染被劫持了'</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, tree.props, newProps);</span><br><span class="line">      <span class="keyword">const</span> newTree = React.cloneElement(tree, props, tree.props.children);</span><br><span class="line">      <span class="keyword">return</span> newTree;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>上面的示例代码都写的是如何声明一个HOC，HOC实际上是一个函数，所以我们将要增强的组件作为参数调用HOC函数，得到增强后的组件。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>原组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> inheritHOC(myComponent);</span><br></pre></td></tr></table></figure></div></p><h3 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h3><p>在实际应用中，一个组件可能被多个HOC增强，我们使用的是被所有的HOC增强后的组件<br>假设现在我们有logger，visible，style等多个HOC，现在要同时增强一个Input组件：<br>logger(visible(style(Input)))<br>这种代码非常的难以阅读，我们可以手动封装一个简单的函数组合工具，将写法改写如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> g(f(...args)));</span><br><span class="line">compose(logger,visible,style)(Input);</span><br></pre></td></tr></table></figure></div></p><p>compose函数返回一个所有函数组合后的函数，compose(f, g, h) 和 (…args) =&gt; f(g(h(…args)))是一样的。很多第三方库都提供了类似compose的函数，例如lodash.flowRight，Redux提供的combineReducers函数等。</p><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p>我们还可以借助ES7为我们提供的Decorators来让我们的写法变的更加优雅：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@logger</span><br><span class="line">@visible</span><br><span class="line">@style</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>Decorators是ES7的一个提案，还没有被标准化，但目前Babel转码器已经支持，我们需要提前配置babel-plugin-transform-decorators-legacy：<br>“plugins”: [“transform-decorators-legacy”]<br>还可以结合上面的compose函数使用：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hoc = compose(logger, visible, style);</span><br><span class="line">@hoc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="HOC的实际应用"><a href="#HOC的实际应用" class="headerlink" title="HOC的实际应用"></a>HOC的实际应用</h2><p>下面是一些我在生产环境中实际对HOC的实际应用场景，由于文章篇幅原因，代码经过很多简化，如有问题欢迎在评论区指出：</p><h3 id="日志打点"><a href="#日志打点" class="headerlink" title="日志打点"></a>日志打点</h3><p>实际上这属于一类最常见的应用，多个组件拥有类似的逻辑，我们要对重复的逻辑进行复用， 官方文档中CommentList的示例也是解决了代码复用问题，写的很详细<br>某些页面需要记录用户行为，性能指标等等，通过高阶组件做这些事情可以省去很多重复代码。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logHoc</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.start = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.end = <span class="built_in">Date</span>.now();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;WrappedComponent.dispalyName&#125;</span> 渲染时间：<span class="subst">$&#123;<span class="keyword">this</span>.end - <span class="keyword">this</span>.start&#125;</span> ms`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user&#125;</span>进入<span class="subst">$&#123;WrappedComponent.dispalyName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user&#125;</span>退出<span class="subst">$&#123;WrappedComponent.dispalyName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="可用、权限控制"><a href="#可用、权限控制" class="headerlink" title="可用、权限控制"></a>可用、权限控制</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; visible, auth, display = <span class="literal">null</span>, ...props &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">if</span> (visible === <span class="literal">false</span> || (auth &amp;&amp; authList.indexOf(auth) === <span class="number">-1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> display</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>authList是我们在进入程序时向后端请求的所有权限列表，当组件所需要的权限不列表中，或者设置的 visible是false，我们将其显示为传入的组件样式，或者null。我们可以将任何需要进行权限校验的组件应用HOC：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@auth</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  ...  &#125;</span><br><span class="line">@auth</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;  ...  &#125;</span><br><span class="line"></span><br><span class="line">&lt;Button auth=<span class="string">"user/addUser"</span>&gt;添加用户&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">&lt;Input auth="user/</span>search<span class="string">" visible=&#123;false&#125; &gt;添加用户&lt;/Input&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>在vue中，绑定一个变量后可实现双向数据绑定，即表单中的值改变后绑定的变量也会自动改变。而React中没有做这样的处理，在默认情况下，表单元素都是非受控组件。给表单元素绑定一个状态后，往往需要手动书写onChange方法来将其改写为受控组件，在表单元素非常多的情况下这些重复操作是非常痛苦的。<br>我们可以借助高阶组件来实现一个简单的双向绑定，代码略长，可以结合下面的思维导图进行理解。</p><p>首先我们自定义一个Form组件，该组件用于包裹所有需要包裹的表单组件，通过contex向子组件暴露两个属性：<br>model：当前Form管控的所有数据，由表单name和value组成，如{name:’ConardLi’,pwd:’123’}。model可由外部传入，也可自行管控。<br>changeModel：改变model中某个name的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">    model: PropTypes.object,</span><br><span class="line">    changeModel: PropTypes.func</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props, context);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      model: props.model || &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.model) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        model: nextProps.model</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  changeModel = <span class="function">(<span class="params">name, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      model: &#123; ...this.state.model, [name]: value &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  getChildContext() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      changeModel: <span class="keyword">this</span>.changeModel,</span><br><span class="line">      model: <span class="keyword">this</span>.props.model || <span class="keyword">this</span>.state.model</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  onSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.model);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onSubmit&#125;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面定义用于双向绑定的HOC，其代理了表单的onChange属性和value属性：<br>发生onChange事件时调用上层Form的changeModel方法来改变context中的model。<br>在渲染时将value改为从context中取出的值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyHoc</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">      model: PropTypes.object,</span><br><span class="line">      changeModel: PropTypes.func</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; changeModel &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">      <span class="keyword">const</span> &#123; onChange &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">const</span> &#123; v_model &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      changeModel(v_model, event.target.value);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> onChange === <span class="string">'function'</span>)&#123;onChange(event);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; model &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">      <span class="keyword">const</span> &#123; v_model &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span></span></span></span><br><span class="line"><span class="xml">        &#123;...this.props&#125;</span></span><br><span class="line"><span class="xml">        value=&#123;model[v_model]&#125;</span></span><br><span class="line"><span class="xml">        onChange=&#123;this.onChange&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@proxyHoc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面的代码只是简略的一部分，除了input，我们还可以将HOC应用在select等其他表单组件，甚至还可以将上面的HOC兼容到span、table等展示组件，这样做可以大大简化代码，让我们省去了很多状态管理的工作，使用如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Form &gt;</span><br><span class="line">        &lt;Input v_model=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/Input&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Input v_model="pwd"&gt;&lt;/</span>Input&gt;</span><br><span class="line">      &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><p>基于上面的双向绑定的例子，我们再来一个表单验证器，表单验证器可以包含验证函数以及提示信息，当验证不通过时，展示错误信息：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateHoc</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">error</span>: <span class="string">''</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; validator &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">if</span> (validator &amp;&amp; <span class="keyword">typeof</span> validator.func === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!validator.func(event.target.value)) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123; <span class="attr">error</span>: validator.msg &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123; <span class="attr">error</span>: <span class="string">''</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span>  &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.error || ''&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> validatorName = &#123;</span><br><span class="line">  func: <span class="function">(<span class="params">val</span>) =&gt;</span> val &amp;&amp; !<span class="built_in">isNaN</span>(val),</span><br><span class="line">  msg: <span class="string">'请输入数字'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> validatorPwd = &#123;</span><br><span class="line">  func: <span class="function">(<span class="params">val</span>) =&gt;</span> val &amp;&amp; val.length &gt; <span class="number">6</span>,</span><br><span class="line">  msg: <span class="string">'密码必须大于6位'</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;HOCInput validator=&#123;validatorName&#125; v_model=<span class="string">"name"</span>&gt;&lt;<span class="regexp">/HOCInput&gt;</span></span><br><span class="line"><span class="regexp">&lt;HOCInput validator=&#123;validatorPwd&#125; v_model="pwd"&gt;&lt;/</span>HOCInput&gt;</span><br></pre></td></tr></table></figure></div></p><p>当然，还可以在Form提交的时候判断所有验证器是否通过，验证器也可以设置为数组等等，由于文章篇幅原因，代码被简化了很多，有兴趣的同学可以自己实现。<br>Redux的connect</p><p>redux中的connect，其实就是一个HOC，下面就是一个简化版的connect实现：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> connect = <span class="function">(<span class="params">mapStateToProps, mapDispatchToProps</span>) =&gt;</span> <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">      store: PropTypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">      <span class="keyword">super</span>()</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        allProps: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context</span><br><span class="line">      <span class="keyword">this</span>._updateProps()</span><br><span class="line">      store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>._updateProps())</span><br><span class="line">    &#125;</span><br><span class="line">    _updateProps () &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context</span><br><span class="line">      <span class="keyword">let</span> stateProps = mapStateToProps ? mapStateToProps(store.getState(), <span class="keyword">this</span>.props): &#123;&#125; </span><br><span class="line">      <span class="keyword">let</span> dispatchProps = mapDispatchToProps? mapDispatchToProps(store.dispatch, <span class="keyword">this</span>.props) : &#123;&#125; </span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        allProps: &#123;</span><br><span class="line">          ...stateProps,</span><br><span class="line">          ...dispatchProps,</span><br><span class="line">          ...this.props</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state.allProps</span>&#125; /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Connect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>代码非常清晰，connect函数其实就做了一件事，将mapStateToProps和mapDispatchToProps分别解构后传给原组件，这样我们在原组件内就可以直接用props获取state以及dispatch函数了。</p><h2 id="使用HOC的注意事项"><a href="#使用HOC的注意事项" class="headerlink" title="使用HOC的注意事项"></a>使用HOC的注意事项</h2><h3 id="告诫—静态属性拷贝"><a href="#告诫—静态属性拷贝" class="headerlink" title="告诫—静态属性拷贝"></a>告诫—静态属性拷贝</h3><p>当我们应用HOC去增强另一个组件时，我们实际使用的组件已经不是原组件了，所以我们拿不到原组件的任何静态属性，我们可以在HOC的结尾手动拷贝他们：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HOCComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  HOCComponent.staticMethod = WrappedComponent.staticMethod;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  <span class="keyword">return</span> HOCComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>如果原组件有非常多的静态属性，这个过程是非常痛苦的，而且你需要去了解需要增强的所有组件的静态属性是什么，我们可以使用hoist-non-react-statics来帮助我们解决这个问题，它可以自动帮我们拷贝所有非React的静态方法，使用方式如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hoistNonReactStatic <span class="keyword">from</span> <span class="string">'hoist-non-react-statics'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HOCComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hoistNonReactStatic(HOCComponent,WrappedComponent);</span><br><span class="line">  <span class="keyword">return</span> HOCComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="告诫—传递refs"><a href="#告诫—传递refs" class="headerlink" title="告诫—传递refs"></a>告诫—传递refs</h3><p>使用高阶组件后，获取到的ref实际上是最外层的容器组件，而非原组件，但是很多情况下我们需要用到原组件的ref。<br>高阶组件并不能像透传props那样将refs透传，我们可以用一个回调函数来完成ref的传递：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoc</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    getWrappedRef = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.wrappedRef;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">ref</span>=<span class="string">&#123;ref</span> =&gt;</span> &#123; this.wrappedRef = ref &#125;&#125; &#123;...this.props&#125; /&gt;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@hoc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123; <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Input ref=&#123;ref =&gt; &#123; <span class="keyword">this</span>.inpitRef = ref.getWrappedRef() &#125;&#125; &gt;&lt;<span class="regexp">/Input&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div></p><p>React 16.3版本提供了一个forwardRef API来帮助我们进行refs传递，这样我们在高阶组件上获取的ref就是原组件的ref了，而不需要再手动传递，如果你的React版本大于16.3，可以使用下面的方式:<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoc</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; forwardedRef, ...props &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">ref</span>=<span class="string">&#123;forwardedRef&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">HOC</span> <span class="attr">forwardedRef</span>=<span class="string">&#123;ref&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="告诫—不要在render方法内创建高阶组件"><a href="#告诫—不要在render方法内创建高阶组件" class="headerlink" title="告诫—不要在render方法内创建高阶组件"></a>告诫—不要在render方法内创建高阶组件</h3><p>React Diff算法的原则是：</p><ul><li>使用组件标识确定是卸载还是更新组件</li><li>如果组件的和前一次渲染时标识是相同的，递归更新子组件</li><li>如果标识不同卸载组件重新挂载新组件</li><li>每次调用高阶组件生成的都是是一个全新的组件，组件的唯一标识响应的也会改变，如果在render方法调用了高阶组件，这会导致组件每次都会被卸载后重新挂载。</li><li>约定-不要改变原始组件</li></ul><p>官方文档对高阶组件的说明：</p><ul><li>高阶组件就是一个没有副作用的纯函数。</li><li>我们再来看看纯函数的定义：</li></ul><p>如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。 该函数不会产生任何可观察的副作用，例如网络请求，输入和输出设备或数据突变。</p><p>如果我们在高阶组件对原组件进行了修改，例如下面的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputComponent.prototype.componentWillReceiveProps = <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></div><p>这样就破坏了我们对高阶组件的约定，同时也改变了使用高阶组件的初衷：我们使用高阶组件是为了增强而非改变原组件。</p><h3 id="约定-透传不相关的props"><a href="#约定-透传不相关的props" class="headerlink" title="约定-透传不相关的props"></a>约定-透传不相关的props</h3><p>使用高阶组件，我们可以代理所有的props，但往往特定的HOC只会用到其中的一个或几个props。我们需要把其他不相关的props透传给原组件，如下面的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visible</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; visible, ...props &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">if</span> (visible === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们只使用visible属性来控制组件的显示可隐藏，把其他props透传下去。<br>约定-displayName<br>在使用React Developer Tools进行调试时，如果我们使用了HOC，调试界面可能变得非常难以阅读，如下面的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@visible</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一个标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@visible</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Title</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>为了方便调试，我们可以手动为HOC指定一个displayName，官方推荐使用HOCName(WrappedComponentName)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> displayName = <span class="string">`Visible(<span class="subst">$&#123;WrappedComponent.displayName&#125;</span>)`</span></span><br></pre></td></tr></table></figure></div><p>这个约定帮助确保高阶组件最大程度的灵活性和可重用性。</p><h2 id="使用HOC的动机"><a href="#使用HOC的动机" class="headerlink" title="使用HOC的动机"></a>使用HOC的动机</h2><p>回顾下上文提到的 Mixin 带来的风险：</p><ul><li>Mixin 可能会相互依赖，相互耦合，不利于代码维护</li><li>不同的Mixin中的方法可能会相互冲突</li><li>Mixin非常多时，组件是可以感知到的，甚至还要为其做相关处理，这样会给代码造成滚雪球式的复杂性</li></ul><p>而HOC的出现可以解决这些问题：</p><ul><li>高阶组件就是一个没有副作用的纯函数，各个高阶组件不会互相依赖耦合</li><li>高阶组件也有可能造成冲突，但我们可以在遵守约定的情况下避免这些行为</li><li>高阶组件并不关心数据使用的方式和原因，而被包裹的组件也不关心数据来自何处。高阶组件的增加不会为原组件增加负担</li></ul><h2 id="HOC的缺陷"><a href="#HOC的缺陷" class="headerlink" title="HOC的缺陷"></a>HOC的缺陷</h2><ol><li>HOC需要在原组件上进行包裹或者嵌套，如果大量使用HOC，将会产生非常多的嵌套，这让调试变得非常困难。</li><li>HOC可以劫持props，在不遵守约定的情况下也可能造成冲突。</li></ol><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p>Hooks是React v16.7.0-alpha中加入的新特性。它可以让你在class以外使用state和其他React特性。<br>使用Hooks，你可以在将含有state的逻辑从组件中抽象出来，这将可以让这些逻辑容易被测试。同时，Hooks可以帮助你在不重写组件结构的情况下复用这些逻辑。所以，它也可以作为一种实现状态逻辑复用的方案。<br>阅读下面的章节使用Hook的动机你可以发现，它可以同时解决Mixin和HOC带来的问题。</p><h2 id="官方提供的Hooks"><a href="#官方提供的Hooks" class="headerlink" title="官方提供的Hooks"></a>官方提供的Hooks</h2><h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><p>我们要使用class组件实现一个计数器功能，我们可能会这样写：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div></p><p>通过useState，我们使用函数式组件也能实现这样的功能：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HookTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; &#123; setCount(count + 1); setNumber(number + 1); &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div></p><p>useState是一个钩子，他可以为函数式组件增加一些状态，并且提供改变这些状态的函数，同时它接收一个参数，这个参数作为状态的默认值。</p><h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><p>Effect Hook 可以让你在函数组件中执行一些具有 side effect（副作用）的操作</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>useEffect方法接收传入两个参数：</p><ol><li><p>回调函数：在第组件一次render和之后的每次update后运行，React保证在DOM已经更新完成之后才会运行回调。</p></li><li><p>状态依赖(数组)：当配置了状态依赖项后，只有检测到配置的状态变化时，才会调用回调函数。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只要组件render后就会执行</span></span><br><span class="line">&#125;);</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只有count改变时才会执行</span></span><br><span class="line">&#125;,[count]);</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="回调返回值"><a href="#回调返回值" class="headerlink" title="回调返回值"></a>回调返回值</h4><p>useEffect的第一个参数可以返回一个函数，当页面渲染了下一次更新的结果后，执行下一次useEffect之前，会调用这个函数。这个函数常常用来对上一次调用useEffect进行清理。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">HookTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行...'</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'清理...'</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; &#123; setCount(count + 1); setNumber(number + 1); &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></div></p><p>执行上面的代码，并点击几次按钮，如果加上浏览器渲染的情况，结果应该是这样的：<br> 页面渲染…1<br> 执行… 1<br> 页面渲染…2<br> 清理… 1<br> 执行… 2<br> 页面渲染…3<br> 清理… 2<br> 执行… 3<br> 页面渲染…4<br> 清理… 3<br> 执行… 4</p><p>那么为什么在浏览器渲染完后，再执行清理的方法还能找到上次的state呢？原因很简单，我们在useEffect中返回的是一个函数，这形成了一个闭包，这能保证我们上一次执行函数存储的变量不被销毁和污染。<br>你可以尝试下面的代码可能更好理解<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> clean;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(flag);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">clean = effect(flag);</span><br><span class="line">flag = <span class="number">2</span>;</span><br><span class="line">clean();</span><br><span class="line">clean = effect(flag);</span><br><span class="line">flag = <span class="number">3</span>;</span><br><span class="line">clean();</span><br><span class="line">clean = effect(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"></span><br><span class="line">effect... <span class="number">1</span></span><br><span class="line">clean... <span class="number">1</span></span><br><span class="line">effect... <span class="number">2</span></span><br><span class="line">clean... <span class="number">2</span></span><br><span class="line">effect... <span class="number">3</span></span><br></pre></td></tr></table></figure></div></p><h4 id="模拟componentDidMount"><a href="#模拟componentDidMount" class="headerlink" title="模拟componentDidMount"></a>模拟componentDidMount</h4><p>componentDidMount等价于useEffect的回调仅在页面初始化完成后执行一次，当useEffect的第二个参数传入一个空数组时可以实现这个效果。<br>function useDidMount(callback) {<br>  useEffect(callback, []);<br>}<br>官方不推荐上面这种写法，因为这有可能导致一些错误。</p><h4 id="模拟componentWillUnmount"><a href="#模拟componentWillUnmount" class="headerlink" title="模拟componentWillUnmount"></a>模拟componentWillUnmount</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useUnMount</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> callback, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>不像 componentDidMount 或者 componentDidUpdate，useEffect 中使用的 effect 并不会阻滞浏览器渲染页面。这让你的 app 看起来更加流畅。</p><h4 id="ref-Hook"><a href="#ref-Hook" class="headerlink" title="ref Hook"></a>ref Hook</h4><p>使用useRef Hook，你可以轻松的获取到dom的ref。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Input</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>注意useRef()并不仅仅可以用来当作获取ref使用，使用useRef产生的ref的current属性是可变的，这意味着你可以用它来保存一个任意值。</p><h4 id="模拟componentDidUpdate"><a href="#模拟componentDidUpdate" class="headerlink" title="模拟componentDidUpdate"></a>模拟componentDidUpdate</h4><p>componentDidUpdate就相当于除去第一次调用的useEffect，我们可以借助useRef生成一个标识，来记录是否为第一次执行：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDidUpdate</span>(<span class="params">callback, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> init = useRef(<span class="literal">true</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (init.current) &#123;</span><br><span class="line">      init.current = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, prop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="使用Hook的注意事项"><a href="#使用Hook的注意事项" class="headerlink" title="使用Hook的注意事项"></a>使用Hook的注意事项</h2><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><p>只能在React函数式组件或自定义Hook中使用Hook。<br>Hook的提出主要就是为了解决class组件的一系列问题，所以我们能在class组件中使用它。</p><h3 id="声明约束"><a href="#声明约束" class="headerlink" title="声明约束"></a>声明约束</h3><p>不要在循环，条件或嵌套函数中调用Hook。<br>Hook通过数组实现的，每次useState 都会改变下标，React需要利用调用顺序来正确更新相应的状态，如果useState 被包裹循环或条件语句中，那每就可能会引起调用顺序的错乱，从而造成意想不到的错误。<br>我们可以安装一个eslint插件来帮助我们避免这些问题。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install eslint-plugin-react-hooks --save-dev</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"react-hooks"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"react-hooks/rules-of-hooks"</span>: <span class="string">"error"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>像上面介绍的HOC和mixin一样，我们同样可以通过自定义的Hook将组件中类似的状态逻辑抽取出来。<br>自定义Hook非常简单，我们只需要定义一个函数，并且把相应需要的状态和effect封装进去，同时，Hook之间也是可以相互引用的。使用use开头命名自定义Hook，这样可以方便eslint进行检查。<br>下面我们看几个具体的Hook封装：</p><h3 id="日志打点-1"><a href="#日志打点-1" class="headerlink" title="日志打点"></a>日志打点</h3><p>我们可以使用上面封装的生命周期Hook。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useLogger = <span class="function">(<span class="params">componentName, ...params</span>) =&gt;</span> &#123;</span><br><span class="line">  useDidMount(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;componentName&#125;</span>初始化`</span>, ...params);</span><br><span class="line">  &#125;);</span><br><span class="line">  useUnMount(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;componentName&#125;</span>卸载`</span>, ...params);</span><br><span class="line">  &#125;)</span><br><span class="line">  useDidUpdate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;componentName&#125;</span>更新`</span>, ...params);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Page1</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  useLogger(<span class="string">'Page1'</span>,props);</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="修改title"><a href="#修改title" class="headerlink" title="修改title"></a>修改title</h3><p>根据不同的页面名称修改页面title:<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useTitle</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  useEffect(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="built_in">document</span>.title = title;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> (<span class="built_in">document</span>.title = <span class="string">"主页"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [title]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Page1</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  useTitle(<span class="string">'Page1'</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="双向绑定-1"><a href="#双向绑定-1" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>我们将表单onChange的逻辑抽取出来封装成一个Hook，这样所有需要进行双向绑定的表单组件都可以进行复用：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useBind</span>(<span class="params">init</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [value, setValue] = useState(init);</span><br><span class="line">  <span class="keyword">let</span> onChange = useCallback(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    setValue(event.currentTarget.value);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value,</span><br><span class="line">    onChange</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Page1</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value = useBind(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...value</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>当然，你可以向上面的HOC那样，结合context和form来封装一个更通用的双向绑定，有兴趣可以手动实现一下。</p><h2 id="使用Hook的动机"><a href="#使用Hook的动机" class="headerlink" title="使用Hook的动机"></a>使用Hook的动机</h2><h3 id="减少状态逻辑复用的风险"><a href="#减少状态逻辑复用的风险" class="headerlink" title="减少状态逻辑复用的风险"></a>减少状态逻辑复用的风险</h3><p>Hook和Mixin在用法上有一定的相似之处，但是Mixin引入的逻辑和状态是可以相互覆盖的，而多个Hook之间互不影响，这让我们不需要在把一部分精力放在防止避免逻辑复用的冲突上。<br>在不遵守约定的情况下使用HOC也有可能带来一定冲突，比如props覆盖等等，使用Hook则可以避免这些问题。</p><h3 id="避免地狱式嵌套"><a href="#避免地狱式嵌套" class="headerlink" title="避免地狱式嵌套"></a>避免地狱式嵌套</h3><p>大量使用HOC的情况下让我们的代码变得嵌套层级非常深，使用Hook，我们可以实现扁平式的状态逻辑复用，而避免了大量的组件嵌套。</p><h3 id="让组件更容易理解"><a href="#让组件更容易理解" class="headerlink" title="让组件更容易理解"></a>让组件更容易理解</h3><p>在使用class组件构建我们的程序时，他们各自拥有自己的状态，业务逻辑的复杂使这些组件变得越来越庞大，各个生命周期中会调用越来越多的逻辑，越来越难以维护。使用Hook，可以让你更大限度的将公用逻辑抽离，将一个组件分割成更小的函数，而不是强制基于生命周期方法进行分割。</p><h3 id="使用函数代替class"><a href="#使用函数代替class" class="headerlink" title="使用函数代替class"></a>使用函数代替class</h3><p>相比函数，编写一个class可能需要掌握更多的知识，需要注意的点也越多，比如this指向、绑定事件等等。另外，计算机理解一个函数比理解一个class更快。Hooks让你可以在classes之外使用更多React的新特性。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hooks </tag>
            
            <tag> HOC </tag>
            
            <tag> Mixin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解各音乐App的vip限制</title>
      <link href="/2020/02/15/%E7%A0%B4%E8%A7%A3%E5%90%84%E9%9F%B3%E4%B9%90App%E9%9C%80%E8%A6%81vip%E9%99%90%E5%88%B6/"/>
      <url>/2020/02/15/%E7%A0%B4%E8%A7%A3%E5%90%84%E9%9F%B3%E4%B9%90App%E9%9C%80%E8%A6%81vip%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>众所周知，目前各大音乐App都存在版权，因此经常遇到一种尴尬的情况，平时习惯用QQ音乐，但是部分歌曲QQ音乐没有或者是需要开会员，<br>对于重度强迫症(还不是因为穷)的我是没法接受的，因此今天带来一种跨平台的免vip听所有歌曲的办法</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>网易云音乐提供了音乐云盘的功能，可以上传本地的音乐，同时可以在pc、移动端同步，那么解决办法就有了</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="寻找喜欢的音乐"><a href="#寻找喜欢的音乐" class="headerlink" title="寻找喜欢的音乐"></a>寻找喜欢的音乐</h3><p>在这里推荐一个名为 <a href="https://www.sq688.com/" target="_blank" rel="noopener">超高无损音乐</a> 的网站，该网站收录了很多无损音质的歌曲，是以百度网盘链接的形式分享，在搜索框搜索自己喜欢的音乐，如图所示：</p><p><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/无损.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/无损.png" class="lazyload"></a></p><p>选择需要的格式，去网盘下载到本地备用</p><h3 id="歌曲上传"><a href="#歌曲上传" class="headerlink" title="歌曲上传"></a>歌曲上传</h3><ol><li>首先下载<a href="https://music.163.com/#/download" target="_blank" rel="noopener">网易云音乐pc客户端</a>，安装，注册账号并登陆(为了能够多端同步音乐)，这里不赘述，操作很简单</li><li>找到左侧 “我的音乐云盘”，然后点击右侧的 “+ 上传音乐” 按钮选择本地下载好的音乐，上传<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/网易云音乐.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/网易云音乐.png" class="lazyload"></a></li><li>上传成功以后手机端就可以同步了，至此，喜欢什么歌下载下来上传就好，免vip，跨平台<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></li></ol><ul><li>安卓端进入客户端后屏幕右滑，可以看到云盘</li></ul><p><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/网易云音乐android.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/网易云音乐android.png" class="lazyload"></a></p><ul><li>ios端进入客户端后选择底部的 “我的”，找到左上角的云朵图标可以进入云盘</li></ul><p><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/网易云音乐ios.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/网易云音乐ios.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云音乐 </tag>
            
            <tag> vip破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter打包--Android</title>
      <link href="/2020/01/14/flutter%E6%89%93%E5%8C%85--Android/"/>
      <url>/2020/01/14/flutter%E6%89%93%E5%8C%85--Android/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目图片"><a href="#项目图片" class="headerlink" title="项目图片"></a>项目图片</h2><p>/android/app/src/main/res/ 目录下根据mipmap-为前缀文件夹存入相应dpi的png图片</p><h2 id="配置APP名称、图标和系统权限"><a href="#配置APP名称、图标和系统权限" class="headerlink" title="配置APP名称、图标和系统权限"></a>配置APP名称、图标和系统权限</h2><p>在 /android/app/src/main/AndroidManifest.xml目录下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:label=<span class="string">"App名字"</span></span><br><span class="line">android:icon=<span class="string">"@mipmap/ic_launcher"</span>  <span class="comment">//此属性为APP图标用到的图片名称</span></span><br></pre></td></tr></table></figure></div><h2 id="APP注册"><a href="#APP注册" class="headerlink" title="APP注册"></a>APP注册</h2><p>将keytool所在路径添加到系统环境变量,默认是在  C:\Program Files\Android\Android Studio\jre\bin  下面，然后将生成的key存储到e盘根目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -v -keystore e:/key.jks -keyalg RSA -keysize <span class="number">2048</span> -validity <span class="number">100000</span> -alias key</span><br></pre></td></tr></table></figure></div><p>回车以后会让你输入对应的信息，其中密匙一定要记住，接下来到项目目录的android文件夹下创建一个名为key.properties的文件，并打开贴入以下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">storePassword=创建KEY时输入的密钥库密码</span><br><span class="line">keyPassword=创建KEY时输入的密钥密码    </span><br><span class="line">keyAlias=key</span><br><span class="line">storeFile=e:/key.jks</span><br></pre></td></tr></table></figure></div><h2 id="配置key注册"><a href="#配置key注册" class="headerlink" title="配置key注册"></a>配置key注册</h2><p>打开/android/app/build.gradle文件，在 android { 这一行前面，加入代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defkeystorePropertiesFile=rootProject.file(<span class="string">"key.properties"</span>)</span><br><span class="line">defkeystoreProperties=newProperties()</span><br><span class="line">keystoreProperties.load(newFileInputStream(keystorePropertiesFile))</span><br></pre></td></tr></table></figure></div><p>把如下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">   release &#123;</span><br><span class="line">       signingConfig signingConfigs.debug</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>替换成：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">   release &#123;</span><br><span class="line">       keyAlias keystoreProperties[<span class="string">'keyAlias'</span>]</span><br><span class="line">       keyPassword keystoreProperties[<span class="string">'keyPassword'</span>]</span><br><span class="line">       <span class="function">storeFile <span class="title">file</span><span class="params">(keystoreProperties[<span class="string">'storeFile'</span>])</span></span></span><br><span class="line"><span class="function">       storePassword keystoreProperties['storePassword']</span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">buildTypes </span>&#123;</span><br><span class="line">   release &#123;</span><br><span class="line">       signingConfig signingConfigs.release</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>到defaultConfig中，录入APPID和版本号：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        <span class="comment">// APPID</span></span><br><span class="line">       applicationId <span class="string">"com.example.myflutter"</span></span><br><span class="line">       <span class="comment">// 可运行应用的最低版本的 Android 平台，由该平台的 API 级别标识符指定</span></span><br><span class="line">       minSdkVersion <span class="number">16</span></span><br><span class="line">       <span class="comment">// 指定运行应用的目标 API 级别。</span></span><br><span class="line">       <span class="comment">// 在某些情况下，这允许应用使用在目标 API 级别中定义的清单元素或行为，</span></span><br><span class="line">       <span class="comment">// 而不是仅限于使用那些针对最低 API 级别定义的元素或行为。</span></span><br><span class="line">       targetSdkVersion <span class="number">27</span></span><br><span class="line">       <span class="comment">//内部版本号</span></span><br><span class="line">       versionCode <span class="number">1</span></span><br><span class="line">       <span class="comment">//对外公布的版本号</span></span><br><span class="line">       versionName <span class="string">"1.0"</span></span><br><span class="line">       testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><h2 id="编译生成apk文件"><a href="#编译生成apk文件" class="headerlink" title="编译生成apk文件"></a>编译生成apk文件</h2><p>在项目根目录终端中输入命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build apk</span><br></pre></td></tr></table></figure></div><h2 id="安装到手机"><a href="#安装到手机" class="headerlink" title="安装到手机"></a>安装到手机</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmake</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter <span class="keyword">install</span> .</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter状态管理之flutter_redux</title>
      <link href="/2019/12/31/flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B9%8Bflutter_redux/"/>
      <url>/2019/12/31/flutter%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B9%8Bflutter_redux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、创建全局state"><a href="#一、创建全局state" class="headerlink" title="一、创建全局state"></a>一、创建全局state</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state.dart</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/user/login_redux.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/user/user_redux.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/middleware/epic_middleware.dart'</span>; <span class="comment">// 在项目中引入epic_middleware中间件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:redux/redux.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalState</span> </span>&#123; <span class="comment">// 全局Redux对象，保存State数据</span></span><br><span class="line">  <span class="built_in">bool</span> login; <span class="comment">// 登陆状态</span></span><br><span class="line"></span><br><span class="line">  GlobalState(&#123;<span class="keyword">this</span>.login&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义appReducer创建 store，通过 appReducer 将 GlobalState 内的login 和 对应的action 关联在一起</span></span><br><span class="line">GlobalState appReducer(GlobalState state, action) &#123;</span><br><span class="line">  <span class="keyword">return</span> GlobalState(</span><br><span class="line">    login: loginReducer(state.login, action),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;Middleware&lt;GlobalState&gt;&gt; middleware = [</span><br><span class="line">  EpicMiddleware&lt;GlobalState&gt;(LoginEpic()),</span><br><span class="line">  LoginMiddleware(),</span><br><span class="line">];</span><br></pre></td></tr></table></figure></div><h3 id="二、创建login的state管理"><a href="#二、创建login的state管理" class="headerlink" title="二、创建login的state管理"></a>二、创建login的state管理</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/state.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/middleware/epic.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/middleware/epic_store.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:redux/redux.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> loginReducer = combineReducers&lt;<span class="built_in">bool</span>&gt;([</span><br><span class="line">  TypedReducer&lt;<span class="built_in">bool</span>, LoginSuccessAction&gt;(_loginResult),</span><br><span class="line">  TypedReducer&lt;<span class="built_in">bool</span>, LogoutAction&gt;(_logoutResult),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> _loginResult(<span class="built_in">bool</span> result, LoginSuccessAction action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.success == <span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 登陆成功以后....</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> action.success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoginSuccessAction触发，就会调用到 _loginResult，它接受一个新的state，并返回</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginSuccessAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> BuildContext context;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> success;</span><br><span class="line"></span><br><span class="line">  LoginSuccessAction(<span class="keyword">this</span>.context, <span class="keyword">this</span>.success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> BuildContext context;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> user;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> password;</span><br><span class="line"></span><br><span class="line">  LoginAction(<span class="keyword">this</span>.context, <span class="keyword">this</span>.user, <span class="keyword">this</span>.password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginMiddleware</span> <span class="keyword">implements</span> <span class="title">MiddlewareClass</span>&lt;<span class="title">GlobalState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> call(Store&lt;GlobalState&gt; store, <span class="built_in">dynamic</span> action, NextDispatcher next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (action <span class="keyword">is</span> LogoutAction) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'logout'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make sure to forward actions to the next middleware in the chain!</span></span><br><span class="line">    next(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginEpic</span> <span class="keyword">implements</span> <span class="title">EpicClass</span>&lt;<span class="title">GlobalState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;<span class="built_in">dynamic</span>&gt; call(Stream&lt;<span class="built_in">dynamic</span>&gt; actions, EpicStore&lt;GlobalState&gt; store) &#123;</span><br><span class="line">    <span class="keyword">return</span> Observable(actions)</span><br><span class="line">        .whereType&lt;LoginAction&gt;()</span><br><span class="line">        .switchMap((action) =&gt; _loginIn(action, store));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;<span class="built_in">dynamic</span>&gt; _loginIn(</span><br><span class="line">      LoginAction action, EpicStore&lt;GlobalState&gt; store) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> UserDio.login( <span class="comment">// 登陆请求</span></span><br><span class="line">        action.user.trim(), action.password.trim(), store);</span><br><span class="line">    <span class="keyword">yield</span> LoginSuccessAction(action.context, (res != <span class="keyword">null</span> &amp;&amp; res.result)); <span class="comment">// 登陆请求结果处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="三、注册全局state"><a href="#三、注册全局state" class="headerlink" title="三、注册全局state"></a>三、注册全局state</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/redux/state.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/app.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/page/user/login.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_redux/flutter_redux.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/common/utils/navigator.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:fluttertoast/fluttertoast.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:redux/redux.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'common/event/index.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/common/event/http_error_event.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:nicolas/common/http/code.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(FlutterReduxApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlutterReduxApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FlutterReduxAppState createState() =&gt; _FlutterReduxAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FlutterReduxAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FlutterReduxApp</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">HttpErrorListener</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> store = <span class="keyword">new</span> Store&lt;GlobalState&gt;(appReducer,</span><br><span class="line">      middleware: middleware,</span><br><span class="line">      initialState: <span class="keyword">new</span> GlobalState( <span class="comment">// 初始化state数据</span></span><br><span class="line">        login: <span class="keyword">false</span>,</span><br><span class="line">      ));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StoreProvider(</span><br><span class="line">      store: store, <span class="comment">// 挂载store</span></span><br><span class="line">      child: <span class="keyword">new</span> StoreBuilder&lt;GlobalState&gt;(builder: (context, store) &#123;</span><br><span class="line">        <span class="keyword">return</span> Text(<span class="string">'xxxx);</span></span><br><span class="line"><span class="string">      &#125;),</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="四、使用state"><a href="#四、使用state" class="headerlink" title="四、使用state"></a>四、使用state</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dart</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">    child: <span class="keyword">new</span> StoreConnector&lt;GlobalState, <span class="built_in">bool</span>&gt;(</span><br><span class="line">        converter: (store) =&gt; store.state.login,</span><br><span class="line">        builder: (context, login) &#123;</span><br><span class="line">            <span class="keyword">return</span> Text(login.toString());</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 跨平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装nginx</title>
      <link href="/2019/06/14/linux%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2019/06/14/linux%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><h3 id="常规安装"><a href="#常规安装" class="headerlink" title="常规安装"></a>常规安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 安装wget</span></span><br><span class="line">yum install -y weget</span><br><span class="line"><span class="meta"># 安装编译工具和相关的库文件 </span></span><br><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br><span class="line"><span class="meta"># 下载PCRE（让nginx支持RUL地址的重定向功能）</span></span><br><span class="line">wget https:<span class="comment">//sourceforge.net/projects/pcre/files/pcre/8.41/pcre-8.41.tar.gz</span></span><br><span class="line"><span class="meta"># 解压</span></span><br><span class="line">tar -xvzf pcre<span class="number">-8.41</span>.tar.gz</span><br><span class="line"><span class="meta"># 进入安装包目录</span></span><br><span class="line">cd pcre<span class="number">-8.41</span></span><br><span class="line"><span class="meta"># 编译安装</span></span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta"># 下载安装 nginx</span></span><br><span class="line">wget http:<span class="comment">//nginx.org/download/nginx-1.14.0.tar.gz</span></span><br><span class="line"><span class="meta"># 解压</span></span><br><span class="line">tar -xvzf nginx<span class="number">-1.14</span><span class="number">.0</span>.tar.gz</span><br><span class="line"><span class="meta"># 进入安装包目录：</span></span><br><span class="line">cd nginx<span class="number">-1.14</span><span class="number">.0</span></span><br><span class="line"><span class="meta"># 编译安装：</span></span><br><span class="line">./configure --prefix=/usr/local/share/applications/nginx<span class="number">-1.14</span><span class="number">.0</span>/ --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta"># 查找nginx安装路径</span></span><br><span class="line">find / -name nginx</span><br><span class="line"><span class="meta"># 制作nginx软链接,格式为：ln -s 目标路径 /usr/sbin/nginx</span></span><br><span class="line"><span class="meta"># 找到带sbin的nginx路径，如：/usr/local/share/applications/nginx-1.14.0/sbin/nginx</span></span><br><span class="line">ln -s /usr/local/share/applications/nginx<span class="number">-1.14</span><span class="number">.0</span>/sbin/nginx /usr/sbin/nginx</span><br></pre></td></tr></table></figure></div><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><p>root权限下添加nginx的yum源，此处以RHEL/CentOS为例，其他版本的linux参考<a href="http://nginx.org/en/linux_packages.html" target="_blank" rel="noopener">这里</a><br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum-utils</span></span><br><span class="line"><span class="attr">yum</span> <span class="string">install yum-utils</span></span><br><span class="line"><span class="comment"># 添加nginx.repo</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/yum.repos.d/nginx.repo</span></span><br></pre></td></tr></table></figure></div></p><p>内容如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[nginx-stable]</span></span><br><span class="line"><span class="attr">name</span>=nginx stable repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"><span class="attr">module_hotfixes</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nginx-mainline]</span></span><br><span class="line"><span class="attr">name</span>=nginx mainline repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"><span class="attr">module_hotfixes</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div></p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure></div><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">angelscript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br><span class="line"># 如果没任何提示，则代表nginx启动成功了，查看nginx端口占用</span><br><span class="line">lsof -i:<span class="number">80</span></span><br><span class="line"># nginx   <span class="number">1410</span>  root    <span class="number">6</span>u  IPv4  <span class="number">22898</span>      <span class="number">0</span>t0  TCP *:http (LISTEN)</span><br><span class="line"># nginx   <span class="number">2206</span> nginx    <span class="number">6</span>u  IPv4  <span class="number">22898</span>      <span class="number">0</span>t0  TCP *:http (LISTEN)</span><br><span class="line"># 开放<span class="number">80</span>端口</span><br><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --add-port=<span class="number">80</span>/tcp</span><br><span class="line"># 重载防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div><h2 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查找配置文件路径</span><br><span class="line"><span class="keyword">find</span> / -name nginx.<span class="keyword">conf</span></span><br><span class="line"># 得到路径如：/etc/nginx/nginx.<span class="keyword">conf</span>，接下来编辑</span><br><span class="line"><span class="keyword">vi</span> /etc/nginx/nginx.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></div><p>找到server部分<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">nginx</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment">#监听的端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  baidu.com; <span class="comment"># 需要绑定的域名   </span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /www/test; <span class="comment"># 项目路径</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm; <span class="comment"># 默认首页</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 反向代理</span></span><br><span class="line">    <span class="attribute">location</span> /api/ &#123; <span class="comment"># 将所有带api的请求代理到127.0.0.1:3000</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host   <span class="variable">$host</span>:<span class="variable">$proxy_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://127.0.0.1:3000;    <span class="comment"># host:port的格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>配置完毕以后esc然后:wq回车，reload一下conf<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></div></p><h2 id="nginx常规操作"><a href="#nginx常规操作" class="headerlink" title="nginx常规操作"></a>nginx常规操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重新载入配置文件</span></span><br><span class="line">nginx -s reload </span><br><span class="line"></span><br><span class="line"><span class="meta"># 重启 nginx</span></span><br><span class="line">nginx -s reopen   </span><br><span class="line">        </span><br><span class="line"><span class="meta"># 停止 nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="meta"># 添加开机启动</span></span><br><span class="line">systemctl enable nginx.service</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看nginx错误日志(最近100条)</span></span><br><span class="line">tail <span class="number">-100</span>f /<span class="keyword">var</span>/log/nginx/error.log</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看nginx请求日志(最近100条)</span></span><br><span class="line">tail <span class="number">-100</span>f /<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios背景音乐autoplay</title>
      <link href="/2019/06/01/ios%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90autoplay/"/>
      <url>/2019/06/01/ios%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90autoplay/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前端页面audio无法自动播放这个在 IOS/Android 上面目前已经是个惯例，如果调用audio.play必须在事件里面响应，换句话说，用户还没有交互，不让调play。网上也有一种解决方案是引导用户触发事件，能解决autoplay的问题，但是局限性很大，如果要播放多个音乐也就凉凉，同时也有AudioContext解决方案，经过尝试还是没达到预期，个人在公司项目中有个需求是进页面播放背景音乐，同时，基于不同阶段，会播放各种音效，因为ios策略限制，找到如下解决方案，ps：项目是基于vue的</p><h3 id="soundjs的引入"><a href="#soundjs的引入" class="headerlink" title="soundjs的引入"></a>soundjs的引入</h3><p>soundjs是专门处理音频的一个js库，这里不做过多介绍，<a href="https://www.createjs.com/soundjs" target="_blank" rel="noopener">传送门</a> 因为项目是基于vue的，但遗憾的是soundjs没有npm包，所以可以通过官网提供的cdn在项目入口index.html通过script引入<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://code.createjs.com/1.0.0/createjs.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>打开soundjs源码<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.createjs=<span class="keyword">this</span>.createjs||&#123;&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div></p><p>可以看到里面创建了一个叫createjs的对象，绑定在this上面，当然了，根据上下文来讲此时的this指代的是window而不是vue实例,因为我们是在入口index.html引入的，算是全局引用，因此我们要使用createjs只需要window.createjs即可。</p><h3 id="绑定音乐列表"><a href="#绑定音乐列表" class="headerlink" title="绑定音乐列表"></a>绑定音乐列表</h3><p>首先我这里有一个音乐列表<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">list:</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'a'</span>, <span class="comment">// 音频名字</span></span><br><span class="line">      src: <span class="string">'../../static/a.mp3'</span> <span class="comment">// 音频路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'b'</span>,</span><br><span class="line">      src: <span class="string">'../../static/b.mp3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'c'</span>,</span><br><span class="line">      src: <span class="string">'../../static/c.mp3'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></div></p><p>接下来需要将音乐列表绑定到createjs对象上</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">  <span class="built_in">window</span>.createjs.source || (<span class="built_in">window</span>.createjs.source = &#123;&#125;) <span class="comment">// 添加source属性存储音乐信息</span></span><br><span class="line">  <span class="built_in">window</span>.createjs.Sound.registerSound(<span class="keyword">this</span>.list[i].src, <span class="keyword">this</span>.list[i].name) <span class="comment">// 绑定音乐信息到createjs实例</span></span><br><span class="line">  <span class="built_in">window</span>.createjs.source[<span class="keyword">this</span>.list[i].name] = <span class="built_in">window</span>.createjs.Sound.createInstance(<span class="keyword">this</span>.list[i].name) <span class="comment">// 创建播实例，添加映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="音乐操作"><a href="#音乐操作" class="headerlink" title="音乐操作"></a>音乐操作</h3><p>接下来创建三个操作音乐的方法</p><h4 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">playSound (e, t, f) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="built_in">window</span>.createjs.source[e]</span><br><span class="line">  i.playState &amp;&amp; i.stop()</span><br><span class="line">  i.play(t)</span><br><span class="line">  f &amp;&amp; f())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// e: 需要播放的音乐名字，这里和音乐list里面的nane字段对应</span></span><br><span class="line"><span class="comment">// t: 播放模式，传入一个对象&#123;loop: -1&#125; ,-1代表无限循环，1代表仅播放一次</span></span><br><span class="line"><span class="comment">// f: callback</span></span><br></pre></td></tr></table></figure></div><h4 id="暂停音乐"><a href="#暂停音乐" class="headerlink" title="暂停音乐"></a>暂停音乐</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pausedSound (e, f) &#123;</span><br><span class="line">    <span class="built_in">window</span>.createjs.source[e].paused = !<span class="built_in">window</span>.createjs.source[e].paused, f &amp;&amp; f()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div><h4 id="停止播放"><a href="#停止播放" class="headerlink" title="停止播放"></a>停止播放</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stopSound (e, f) &#123;</span><br><span class="line">   <span class="keyword">return</span> e ? <span class="built_in">window</span>.createjs.source[e].stop() : <span class="built_in">window</span>.createjs.Sound.stop(), f &amp;&amp; f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="静音"><a href="#静音" class="headerlink" title="静音"></a>静音</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mutedSound () &#123;</span><br><span class="line">    <span class="built_in">window</span>.createjs.Sound.muted = !<span class="built_in">window</span>.createjs.Sound.muted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli配置多入口</title>
      <link href="/2019/04/23/vue-cli%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%85%A5%E5%8F%A3/"/>
      <url>/2019/04/23/vue-cli%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>因实际需要，在公司移动端项目上线后机组做pc版，此时，如果重新构建一个pc项目的话一来维护不便，二来很多公共资源可以重复利用，因此在原来移动端的基础上构建多入口，实现一个项目两个版本，甚至多个</p></blockquote><h3 id="一、目录结构分析"><a href="#一、目录结构分析" class="headerlink" title="一、目录结构分析"></a>一、目录结构分析</h3><blockquote><p>配置多入口其实就是将pc版和手机版共用一个cli，在src目录下创建一个entries目录，里面分别创建pc、mobile目录存放分别的入口文件，接下来，将index.html、main.js、App.vue移动到pc目录并改名，手机端复制pc改名</p></blockquote><h4 id="原目录结构"><a href="#原目录结构" class="headerlink" title="原目录结构"></a>原目录结构</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="selector-tag">README</span><span class="selector-class">.md</span>            项目介绍</span><br><span class="line">├── <span class="selector-tag">index</span><span class="selector-class">.html</span>           入口页面</span><br><span class="line">├── <span class="selector-tag">build</span>              构建脚本目录</span><br><span class="line">│  ├── <span class="selector-tag">build-server</span><span class="selector-class">.js</span>         运行本地构建服务器，可以访问构建后的页面</span><br><span class="line">│  ├── <span class="selector-tag">build</span><span class="selector-class">.js</span>            生产环境构建脚本</span><br><span class="line">│  ├── <span class="selector-tag">dev-client</span><span class="selector-class">.js</span>          开发服务器热重载脚本，主要用来实现开发阶段的页面自动刷新</span><br><span class="line">│  ├── <span class="selector-tag">dev-server</span><span class="selector-class">.js</span>          运行本地开发服务器</span><br><span class="line">│  ├── <span class="selector-tag">utils</span><span class="selector-class">.js</span>            构建相关工具方法</span><br><span class="line">│  ├── <span class="selector-tag">webpack</span><span class="selector-class">.base</span><span class="selector-class">.conf</span><span class="selector-class">.js</span>      <span class="selector-tag">wabpack</span>基础配置</span><br><span class="line">│  ├── <span class="selector-tag">webpack</span><span class="selector-class">.dev</span><span class="selector-class">.conf</span><span class="selector-class">.js</span>       <span class="selector-tag">wabpack</span>开发环境配置</span><br><span class="line">│  └── <span class="selector-tag">webpack</span><span class="selector-class">.prod</span><span class="selector-class">.conf</span><span class="selector-class">.js</span>      <span class="selector-tag">wabpack</span>生产环境配置</span><br><span class="line">├── <span class="selector-tag">config</span>             项目配置</span><br><span class="line">│  ├── <span class="selector-tag">dev</span><span class="selector-class">.env</span><span class="selector-class">.js</span>           开发环境变量</span><br><span class="line">│  ├── <span class="selector-tag">index</span><span class="selector-class">.js</span>            项目配置文件</span><br><span class="line">│  ├── <span class="selector-tag">prod</span><span class="selector-class">.env</span><span class="selector-class">.js</span>           生产环境变量</span><br><span class="line">│  └── <span class="selector-tag">test</span><span class="selector-class">.env</span><span class="selector-class">.js</span>           测试环境变量</span><br><span class="line">├── <span class="selector-tag">package</span><span class="selector-class">.json</span>          <span class="selector-tag">npm</span>包配置文件，里面定义了项目的<span class="selector-tag">npm</span>脚本，依赖包等信息</span><br><span class="line">├── <span class="selector-tag">src</span>               源码目录  </span><br><span class="line">│  ├── <span class="selector-tag">main</span><span class="selector-class">.js</span>             入口<span class="selector-tag">js</span>文件</span><br><span class="line">│  ├── <span class="selector-tag">app</span><span class="selector-class">.vue</span>             根组件</span><br><span class="line">│  ├── <span class="selector-tag">components</span>           公共组件目录</span><br><span class="line">│  ├── <span class="selector-tag">assets</span>             资源目录，这里的资源会被<span class="selector-tag">wabpack</span>构建</span><br><span class="line">│  │  └── <span class="selector-tag">images</span></span><br><span class="line">│  │    └── <span class="selector-tag">logo</span><span class="selector-class">.png</span></span><br><span class="line">│  ├── <span class="selector-tag">routes</span>             前端路由</span><br><span class="line">│  │  └── <span class="selector-tag">index</span><span class="selector-class">.js</span></span><br><span class="line">├── <span class="selector-tag">static</span>             纯静态资源，不会被<span class="selector-tag">wabpack</span>构建。</span><br><span class="line">└── <span class="selector-tag">test</span>              测试文件目录（<span class="selector-tag">unit</span>&amp;<span class="selector-tag">e2e</span>）</span><br><span class="line">  └── <span class="selector-tag">unit</span>              单元测试</span><br></pre></td></tr></table></figure></div><h4 id="配置多入口目录"><a href="#配置多入口目录" class="headerlink" title="配置多入口目录"></a>配置多入口目录</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="selector-tag">src</span></span><br><span class="line">│  ├── <span class="selector-tag">entries</span>        新的入口目录</span><br><span class="line">│  │    │── <span class="selector-tag">pc</span>            <span class="selector-tag">pc</span>版入口文目录</span><br><span class="line">│  ││  ├──<span class="selector-tag">pc</span><span class="selector-class">.js</span>          <span class="selector-tag">pc</span>版入口<span class="selector-tag">js</span>(以前的<span class="selector-tag">main</span><span class="selector-class">.js</span>)</span><br><span class="line">│  ││  ├──<span class="selector-tag">pc</span><span class="selector-class">.vue</span>         <span class="selector-tag">pc</span>版入口<span class="selector-tag">vue</span>(以前的<span class="selector-tag">App</span><span class="selector-class">.vue</span>)</span><br><span class="line">│  ││  └──<span class="selector-tag">pc</span><span class="selector-class">.html</span>        <span class="selector-tag">pc</span>版入口<span class="selector-tag">html</span>(以前的<span class="selector-tag">index</span><span class="selector-class">.html</span>)</span><br><span class="line">│  │    └── <span class="selector-tag">mobile</span>        手机版入口文目录</span><br><span class="line">│  │   ├──<span class="selector-tag">mobile</span><span class="selector-class">.js</span>      手机版入口<span class="selector-tag">js</span>(以前的<span class="selector-tag">main</span><span class="selector-class">.js</span>)</span><br><span class="line">│  │   ├──<span class="selector-tag">mobile</span><span class="selector-class">.vue</span>     手机版入口<span class="selector-tag">vue</span>(以前的<span class="selector-tag">App</span><span class="selector-class">.vue</span>)</span><br><span class="line">│  │   └──<span class="selector-tag">mobile</span><span class="selector-class">.html</span>    手机版入口<span class="selector-tag">vue</span>(以前的<span class="selector-tag">App</span><span class="selector-class">.vue</span>)</span><br><span class="line">│  └─── <span class="selector-tag">router</span>             </span><br><span class="line">│     ├──<span class="selector-tag">mobile</span><span class="selector-class">.js</span>     手机版路由</span><br><span class="line">│     └──<span class="selector-tag">pc</span><span class="selector-class">.js</span>    <span class="selector-tag">pc</span>版路由</span><br></pre></td></tr></table></figure></div><h3 id="二、入口文件修改"><a href="#二、入口文件修改" class="headerlink" title="二、入口文件修改"></a>二、入口文件修改</h3><p>以pc.vue为例，mobile同理<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">pgsql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Pc <span class="keyword">from</span> <span class="string">'./pc.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../.././router/pc.js'</span></span><br><span class="line"><span class="built_in">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; Pc &#125;,</span><br><span class="line">  <span class="keyword">template</span>: <span class="string">'&lt;Pc/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h3 id="三、修改utils配置文件"><a href="#三、修改utils配置文件" class="headerlink" title="三、修改utils配置文件"></a>三、修改utils配置文件</h3><p>打开/build/utils.js加入如下内容<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)</span><br><span class="line"><span class="comment">// 页面模板</span></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// 取得相应的页面路径，因为之前的配置，所以是src文件夹下的entries文件夹</span></span><br><span class="line"><span class="keyword">var</span> PAGE_PATH = path.resolve(__dirname, <span class="string">'../src/entries'</span>)</span><br><span class="line">    <span class="comment">// 用于做相应的merge处理</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//多入口配置</span></span><br><span class="line"><span class="comment">// 通过glob模块读取page文件夹下的所有对应文件夹下的js后缀文件，如果该文件存在</span></span><br><span class="line"><span class="comment">// 那么就作为入口处理</span></span><br><span class="line">exports.entries = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> entryFiles = glob.sync(PAGE_PATH + <span class="string">'/*/*.js'</span>)  <span class="comment">// 寻找入口js（原main.js）</span></span><br><span class="line">    <span class="keyword">var</span> map = &#123;&#125;</span><br><span class="line">    entryFiles.forEach(<span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>))</span><br><span class="line">        map[filename] = filePath</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多页面输出配置</span></span><br><span class="line"><span class="comment">// 与上面的多页面入口配置相同，读取page文件夹下的对应的html后缀文件，然后放入数组中</span></span><br><span class="line">exports.htmlPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> entryHtml = glob.sync(PAGE_PATH + <span class="string">'/*/*.html'</span>)</span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line">entryHtml.forEach(<span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> filename = filePath.substring(filePath.lastIndexOf(<span class="string">'\/'</span>) + <span class="number">1</span>, filePath.lastIndexOf(<span class="string">'.'</span>))</span><br><span class="line">    <span class="keyword">let</span> conf = &#123;</span><br><span class="line">        <span class="comment">// 模板来源</span></span><br><span class="line">        template: filePath,</span><br><span class="line">        <span class="comment">// 文件名称</span></span><br><span class="line">        filename: filename + <span class="string">'.html'</span>,</span><br><span class="line">        <span class="comment">// 页面模板需要加对应的js脚本，如果不加这行则每个页面都会引入所有的js脚本</span></span><br><span class="line">        chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, filename],</span><br><span class="line">        inject: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">        conf = merge(conf, &#123;</span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(<span class="keyword">new</span> HtmlWebpackPlugin(conf))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="四、修改webpack-dev-conf"><a href="#四、修改webpack-dev-conf" class="headerlink" title="四、修改webpack.dev.conf"></a>四、修改webpack.dev.conf</h3><p>打开/build/webpack.dev.conf.js做如下修改：</p><ol><li><p>找到 plugins:数组，将如下内容注释或删除</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attribute">filename</span>: <span class="string">'index.html'</span>,</span><br><span class="line">  template: <span class="string">'index.html'</span>,</span><br><span class="line">  inject: true</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></div></li><li><p>在plugins数组上拼接上在utils.js内获取到的入口内容<br>修改完成以后的plugins如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">haxe</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">plugins: <span class="type"></span>[</span><br><span class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: <span class="type">require</span>(<span class="string">'../config/dev.env'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.NamedModulesPlugin(), <span class="comment">// HMR shows correct file names in console on update.</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">webpack</span>.NoEmitOnErrorsPlugin(),</span><br><span class="line">    <span class="comment">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">    <span class="comment">// 注释开始</span></span><br><span class="line">    <span class="comment">// new HtmlWebpackPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   filename: 'index.html',</span></span><br><span class="line">    <span class="comment">//   template: 'index.html',</span></span><br><span class="line">    <span class="comment">//   inject: true</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">    <span class="comment">// 注释结束</span></span><br><span class="line">    <span class="comment">// copy custom static assets</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">CopyWebpackPlugin</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        from: <span class="type">path</span>.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">        to: <span class="type">config</span>.dev.assetsSubDirectory,</span><br><span class="line">        ignore: <span class="type"></span>[<span class="string">'.*'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ].concat(utils.htmlPlugin())  <span class="comment">// 这里是添加的部分</span></span><br></pre></td></tr></table></figure></div></li></ol><h3 id="修改webpack-prod-conf"><a href="#修改webpack-prod-conf" class="headerlink" title="修改webpack.prod.conf"></a>修改webpack.prod.conf</h3><p>打开/build/webpack.prod.conf做如下修改：</p><ol><li><p>找到 plugins:数组，将如下内容注释或删除</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">new</span> <span class="string">HtmlWebpackPlugin(&#123;</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">process.env.NODE_ENV</span> <span class="string">===</span> <span class="string">'testing'</span></span><br><span class="line">    <span class="string">?</span> <span class="string">'index.html'</span></span><br><span class="line">    <span class="string">:</span> <span class="string">config.build.index,</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">'index.html'</span><span class="string">,</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">minify:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">removeComments:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="attr">collapseWhitespace:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="attr">removeAttributeQuotes:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">//</span> <span class="attr">more options:</span></span><br><span class="line">    <span class="string">//</span> <span class="string">https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">//</span> <span class="string">necessary</span> <span class="string">to</span> <span class="string">consistently</span> <span class="string">work</span> <span class="string">with</span> <span class="string">multiple</span> <span class="string">chunks</span> <span class="string">via</span> <span class="string">CommonsChunkPlugin</span></span><br><span class="line">  <span class="attr">chunksSortMode:</span> <span class="string">'dependency'</span></span><br><span class="line"><span class="string">&#125;),</span></span><br></pre></td></tr></table></figure></div></li><li><p>在plugins数组上拼接上在utils.js内获取到的入口内容 (操作同上一步)</p></li></ol><h3 id="五、添加客户端判断"><a href="#五、添加客户端判断" class="headerlink" title="五、添加客户端判断"></a>五、添加客户端判断</h3><p>客户端访问项目时，通过js判断展示哪个版本<br>在pc版本入口pc.html文件内添加如下js<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">smalltalk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (/<span class="type">Android</span>|webOS|iPhone|iPod|<span class="type">BlackBerry</span>/i.test(navigator.userAgent)) &#123;</span><br><span class="line">window.location.href = <span class="string">'/mobile.html#/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>同理，在mobile.html添加如下js<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">smalltalk</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!/<span class="type">Android</span>|webOS|iPhone|iPod|<span class="type">BlackBerry</span>/i.test(navigator.userAgent)) &#123;</span><br><span class="line">window.location.href = <span class="string">'/pc.html#/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="六、后续说明"><a href="#六、后续说明" class="headerlink" title="六、后续说明"></a>六、后续说明</h3><p>以上步骤操作完成以后便成功的添加了多入口，但是有几点需要注意：</p><ol><li>本地运行调试的时候，以前我们是localhost:8080就可以访问了，但是现在我们需要 localhost:8080/pc.html或者localhost:8080/mobile.html</li><li>项目通过webpack打包以后会在根目录生成mobile.html和pc.html,在项目部署的时候需要配置默首页，也就是指定是mobile.html或者pc.html</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建个人博客</title>
      <link href="/2018/12/07/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/12/07/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到我的博客驿站，本站是使用Hexo+Github基于基于Node.js的静态博客框架, 官方文档请参考<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a></p><h2 id="安装Node及环境配置"><a href="#安装Node及环境配置" class="headerlink" title="安装Node及环境配置"></a>安装Node及环境配置</h2><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node官网</a>你可以根据不同平台系统选择你需要的Node.js安装包，安装过程很简单，下一步下一步就ok<br>注意：Linux上安装Node.js需要安装Python，建议安装Python 3.6以上版本。</p><h3 id="安装Hexo脚手架"><a href="#安装Hexo脚手架" class="headerlink" title="安装Hexo脚手架"></a>安装Hexo脚手架</h3><p>在安装了node之后，我们就可以使用node的包管理器npm安装hexo了，操作如下<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></div></p><h2 id="git相关配置"><a href="#git相关配置" class="headerlink" title="git相关配置"></a>git相关配置</h2><p>本地搭建好博客项目之后需要提交到github上去.首先去<a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>申请个人账号，以便后期用来做博客的远程创库、域名、服务器之类的，github账号不再啰嗦了,跟一般的注册账号差不多</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>打开<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>下载git，安装过程全程默认配置，下一步下一步安装</p><h3 id="本地创建ssh-key"><a href="#本地创建ssh-key" class="headerlink" title="本地创建ssh key"></a>本地创建ssh key</h3><p>桌面右键git bash here，然后：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">excel</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"邮箱地址"</span></span><br></pre></td></tr></table></figure></div></p><p>之后会要求确认路径和输入密码，记住这个路径，我们这使用默认的一路回车就行。成功的话会在.ssh文件夹生成id_rsa.pub文件，用记事本打开，复制里面的内容，也就是我们需要的key</p><h3 id="github添加ssh-key"><a href="#github添加ssh-key" class="headerlink" title="github添加ssh key"></a>github添加ssh key</h3><p>回到github页面上，点击头像右侧倒三角，选择Settings（账户配置），左边选择SSH Keys，点击右上角Add SSH Key,title随便填，下方文本框粘贴上一步上生成的key确定</p><h3 id="ssh-key本地验证"><a href="#ssh-key本地验证" class="headerlink" title="ssh key本地验证"></a>ssh key本地验证</h3><p>回到刚才生成key的命令行，执行如下命令验证github用户名和邮箱<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的邮箱"</span></span><br></pre></td></tr></table></figure></div></p><p>注意：执行这两条命令成功后没有任何提示</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>接下来初始化Hexo项目，首先在需要保存项目的目录鼠标右键选择”git bash here”,然后：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></div><p>blog为你博客的项目名称，接下来切换到博客路径<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure></div></p><p>安装项目依赖包<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmake</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></div></p><p>至此，博客初始化完成，可以启动hexo服务了<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></div></p><p>命令行提示：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http:<span class="comment">//localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure></div></p><p>接下来可以在浏览器地址栏输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问博客</p><h2 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h2><ul><li>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题网站</a>查找自己喜欢的主题，找到以后点击进去预览，在博客预览页面找到博主的github链接</li><li>进入博主github首页，找到主题对应的仓库，点击右侧绿色”clone or download”按钮获取主题仓库地址</li><li>下载<br>首先在命令行使用cd命令切换到themes目录，然后<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">crmsh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">主题地址</span></span><br></pre></td></tr></table></figure></div></li></ul><p>等待下载完毕以后会在themes文件夹内生成一个主题文件夹，接下来修改根目录_config.yml的theme选项为你刚才下载的主题名，接下来清除一下缓存<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br></pre></td></tr></table></figure></div></p><p>然后编译<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure></div></p><p>然后重启服务(在之前启动服务的命令行使用ctrl+c停止服务)，然后<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></div></p><p>接下来在浏览器预览就可以看到新主题的效果了</p><h2 id="托管到gitHub"><a href="#托管到gitHub" class="headerlink" title="托管到gitHub"></a>托管到gitHub</h2><h3 id="创建博客托管仓库"><a href="#创建博客托管仓库" class="headerlink" title="创建博客托管仓库"></a>创建博客托管仓库</h3><p>创建一个与自己用户名同名的repository，在自己Github页面，点击头像左侧+按钮，选择new repository，比如我的Github账号是Givingcode，那么我应该创建的repository名字应该是Givingcode.github.io</p><h3 id="添加deploy配置"><a href="#添加deploy配置" class="headerlink" title="添加deploy配置"></a>添加deploy配置</h3><p>首先在根目录_config.yml文件内配置git<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></div></p><p>repository：就是你的gitHub同名仓库的地址</p><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a>代码托管</h3><p>安装 hexo-deployer-git依赖包<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></div></p><p>然后使用如下命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div><p>此时，你就可以在浏览器地址栏输入 “用户名.github.io”来访问你的个人博客<br>(用户名：你gitHub的用户名)</p><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名申请的途径非常多，建议使用<a href="http://www.aliyun.com" target="_blank" rel="noopener">阿里云</a>的，方便后期备案，在阿里云购买了域名之后，到域名管理中心进行域名解析，添加以下几条记录值：</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路(isp)</th><th>记录值</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>默认</td><td>用户名.github.io</td></tr><tr><td>A</td><td>@</td><td>默认</td><td>192.30.252.153</td></tr><tr><td>A</td><td>@</td><td>默认</td><td>192.30.252.154</td></tr></tbody></table><h3 id="创建域名关联文件"><a href="#创建域名关联文件" class="headerlink" title="创建域名关联文件"></a>创建域名关联文件</h3><p>在项目根目录source目录新建名为CNAME的文件，（注意：该文件没有后缀名）<br>然后在CNAME文件里面填写你的域名，如：xxx.com   注意：不带www也不带http，只需要域名就好</p><p>接下来重新编译推送一下<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 编译</span></span><br><span class="line">hexo d <span class="comment"># 推送</span></span><br></pre></td></tr></table></figure></div></p><p>提示：INFO  Deploy done: git 之后就可以使用域名访问你的个人博客了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adobe PhotoShop CC激活破解</title>
      <link href="/2018/10/29/Adobe%20PhotoShop%20CC%E6%BF%80%E6%B4%BB%E7%A0%B4%E8%A7%A3/"/>
      <url>/2018/10/29/Adobe%20PhotoShop%20CC%E6%BF%80%E6%B4%BB%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>在我的<a href="https://pan.baidu.com/s/1hyRnHRRUf_5cTAKD0JHSFw" target="_blank" rel="noopener">百度网盘</a><br>提取码：ajif<br>下载压缩包,解压,展开Adobe Photoshop CC 2017-18.0(64 bit)，得到如下文件：<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/1.png" class="lazyload"></a></p><h3 id="安装ps"><a href="#安装ps" class="headerlink" title="安装ps"></a>安装ps</h3><ol><li>首先断开计算机网络(禁用电脑网络或者拔网线或者断wifi)</li><li>双击Set-up.exe,得到如下界面，等待进度条跑完，预计3分钟左右<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/2.png" class="lazyload"></a></li><li>安装结束后会在开始菜单生成如下2个快捷方式<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/3.png" class="lazyload"></a></li><li>点击蓝色ps按钮运行，选择以后登录<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/4.png" class="lazyload"></a></li><li>选择开始使用<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/5.png" class="lazyload"></a></li><li>接受<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/6.png" class="lazyload"></a></li><li>接下来会打开ps界面，等待10s左右等它加载完所有组件，关闭ps软件</li></ol><h3 id="破解激活"><a href="#破解激活" class="headerlink" title="破解激活"></a>破解激活</h3><ol><li>双击打开激活工具<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/7.jpg" class="lazyload"></a></li><li>在下拉列表选择Adobe Photoshop cc2015.5<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/8.png" class="lazyload"></a></li><li>点击install选择amtlib.dll文件<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/9.png" class="lazyload"></a><br>默认在C:\Program Files\Adobe\Adobe Photoshop CC 2017文件夹下<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/10.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/10.jpg" class="lazyload"></a></li><li>点击Advaced按钮，然后关闭<br><a href="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://raw.githubusercontent.com/wiki/Givingcode/images/blog/ps/11.png" class="lazyload"></a><br>5、激活破解完成，重新连接电脑网络，就可以正常使用ps了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PhotoShop </tag>
            
            <tag> 激活破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实现拖拽</title>
      <link href="/2018/10/21/vue%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/"/>
      <url>/2018/10/21/vue%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slideContent"</span> <span class="attr">:style</span>=<span class="string">"&#123;left: left + 'px', top: top + 'px'&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"move"</span> @<span class="attr">mousedown</span>=<span class="string">"move($event)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-rank"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"index"</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        left: <span class="built_in">window</span>.innerWidth - <span class="number">445</span>,</span></span><br><span class="line"><span class="javascript">        top: <span class="built_in">window</span>.innerHeight - <span class="number">640</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      move(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> t = <span class="built_in">window</span>.innerWidth - <span class="number">375</span>, a = <span class="built_in">window</span>.innerHeight - <span class="number">605</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> i = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"slideContent"</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> n = e.clientX - i.offsetLeft</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> s = e.clientY - i.offsetTop;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">document</span>.onmousemove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> r = e.clientX - n</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> o = e.clientY - s</span></span><br><span class="line"><span class="handlebars"><span class="xml">          return r <span class="tag">&lt;<span class="name">=</span> <span class="attr">0</span> ? <span class="attr">r</span> = <span class="string">0</span> <span class="attr">:</span> <span class="attr">r</span> &gt;</span>= t &amp;&amp; (r = t), o <span class="tag">&lt;<span class="name">=</span> <span class="attr">20</span> ? <span class="attr">o</span> = <span class="string">20</span> <span class="attr">:</span> <span class="attr">o</span> &gt;</span>= a &amp;&amp; (o = a), i.style.left = r + "px", i.style.top = o + "px", !1</span></span></span><br><span class="line"><span class="javascript">        &#125;, <span class="built_in">document</span>.onmouseup = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>, <span class="built_in">document</span>.onmouseup = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        &#125;, <span class="built_in">document</span>.onmouseleave = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>, <span class="built_in">document</span>.onmouseup = <span class="literal">null</span></span></span><br><span class="line">        &#125;, !1</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.slideContent</span> &#123;</span></span><br><span class="line">      position: fixed;</span><br><span class="line">      background: rgb(239, 238, 244);</span><br><span class="line">      width: 375px;</span><br><span class="line">      height: 600px;</span><br><span class="line">      right: 70px;</span><br><span class="line">      top: 0px;</span><br><span class="line">      z-index: 90;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">box-shadow</span>: 0 5<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(6, 6, 6, <span class="selector-class">.3</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.move</span> &#123;</span></span><br><span class="line">        cursor: move;</span><br><span class="line">        user-select: none;</span><br><span class="line">        position: relative;</span><br><span class="line">        border-radius: 3px 3px 0 0;</span><br><span class="line">        height: 20px;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-id">#bbb</span>, <span class="selector-id">#eee</span>);</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        line-height: 10px;</span><br><span class="line">        display: block;</span><br><span class="line">        padding: 5px 10px;</span><br><span class="line"></span><br><span class="line">        i &#123;</span><br><span class="line">          float: right;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS创建EC2</title>
      <link href="/2018/10/11/AWS%E6%90%AD%E5%BB%BAEC2/"/>
      <url>/2018/10/11/AWS%E6%90%AD%E5%BB%BAEC2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="切换pem为账号登陆"><a href="#切换pem为账号登陆" class="headerlink" title="切换pem为账号登陆"></a>切换pem为账号登陆</h2><ol><li>下载xxx.pem文件到本地</li><li>命令行cd到xxx.pem所在路径，使用pem登陆<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ssh -i <span class="string">"xxx.pem"</span> ec2-user@ec2-18-224-140-75.us-east-2.compute.amazonaws.com</span><br><span class="line"><span class="comment"># 创建root密码</span></span><br><span class="line">sudo passwd root </span><br><span class="line"><span class="comment"># 输入两次密码，期间没有任何提示</span></span><br><span class="line"><span class="comment"># 切换到root身份</span></span><br><span class="line">su root</span><br><span class="line"><span class="comment"># 编辑亚马逊主机的ssh登录方式 </span></span><br><span class="line">vi /etc/ssh/sshd_config </span><br><span class="line"><span class="comment"># 把 PasswordAuthentication no 改为 PasswordAuthentication yes </span></span><br><span class="line"><span class="comment"># ps: 如果没有则新插进去 </span></span><br><span class="line"><span class="comment"># 重启sshd使修改生效</span></span><br><span class="line">service sshd restart</span><br><span class="line"><span class="comment"># 修改root用户名(修改root登录用户名减少主机被暴力破解的风险)</span></span><br><span class="line">vi /etc/passwd</span><br><span class="line"><span class="comment"># 修改第1行第1个root为新的用户名，esc然后:wq保存退出</span></span><br><span class="line">vi /etc/shadow</span><br><span class="line"><span class="comment"># 修改第1行第1个root为新的用户名，esc然后:wq! 强制保存退出</span></span><br><span class="line"><span class="comment"># 重启服务器</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 使用git bash或者xshell之类的ssh客户端通过用户名密码远程连接</span></span><br><span class="line">ssh 用户名@ip地址</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h2><p>ps：这是单独搭建ftp服务器用于上传下载文件，但是一般不建议这么操作，容易被攻击，如果常用ssh客户端为xShell，那么可以使用xFtp<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 yum 安装 vsftpd</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line"><span class="comment"># 启动 VSFTPD</span></span><br><span class="line">service vsftpd start</span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">netstat -nltp | grep 21</span><br><span class="line"><span class="comment"># 配置 FTP 权限</span></span><br><span class="line"><span class="comment"># 编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：</span></span><br><span class="line"><span class="comment"># 禁用匿名用户  12 YES 改为NO</span></span><br><span class="line"><span class="attribute">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"><span class="comment"># 禁止切换根目录 101 行 删除#</span></span><br><span class="line"><span class="attribute">chroot_local_user</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 重新启动 FTP 服务</span></span><br><span class="line">service vsftpd restart</span><br><span class="line"><span class="comment"># 创建 FTP 用户（useradd 用户名）</span></span><br><span class="line">useradd web</span><br><span class="line"><span class="comment"># 为用户 ftpuser 设置密码</span></span><br><span class="line">echo <span class="string">"123456"</span> | passwd web --stdin</span><br><span class="line"><span class="comment"># 限制用户 ftpuser只能通过 FTP 访问服务器，而不能直接登录服务器：</span></span><br><span class="line">usermod -s /sbin/nologin web</span><br><span class="line"><span class="comment"># 为用户 ftpuser创建主目录并约定：</span></span><br><span class="line"><span class="comment"># /data/ftp 为主目录, 该目录不可上传文件 </span></span><br><span class="line"><span class="comment"># /data/ftp/pub 文件只能上传到该目录下</span></span><br><span class="line">mkdir -p /data/ftp/pub</span><br><span class="line"><span class="comment"># 设置访问权限</span></span><br><span class="line">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</span><br><span class="line"><span class="comment"># 设置为用户的主目录：</span></span><br><span class="line">usermod -d /data/ftp web</span><br></pre></td></tr></table></figure></div></p><p>注意：记得关闭防火墙或者开放FTP默认端口(21)</p><ul><li><p>关闭SELinux服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">angelscript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br></pre></td></tr></table></figure></div></li><li><p>关闭防火墙</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">iptables -F</span></span><br></pre></td></tr></table></figure></div></li></ul><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载node压缩包</span></span><br><span class="line">wget https://npm.taobao.org/mirrors/node/v10.6.0/node-v10.6.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf node-v10.6.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># 更改node安装目录</span></span><br><span class="line">mv node-v10.6.0-linux-x64 /root/node</span><br><span class="line"><span class="comment"># 配置全局环境变量 </span></span><br><span class="line">ln -s /root/node/bin/node /usr/sbin/node</span><br><span class="line">ln -s /root/node/bin/npm /usr/sbin/npm</span><br><span class="line"><span class="comment"># 安装守护程序forever</span></span><br><span class="line">npm install forever -g</span><br><span class="line"><span class="comment"># 查找forever的安装路径</span></span><br><span class="line">find / -name forerver</span><br><span class="line"><span class="comment"># 我这里查到是在：/node/bin/，添加forever到PATH</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment"># 在结尾的地方添加记录</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/node/bin</span><br><span class="line"><span class="comment"># 重建缓存</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># forever启用node服务</span></span><br><span class="line">forever start xxx.js</span><br></pre></td></tr></table></figure></div><h2 id="安装ngnix"><a href="#安装ngnix" class="headerlink" title="安装ngnix"></a>安装ngnix</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装wget</span></span><br><span class="line">yum install -y weget</span><br><span class="line"><span class="comment"># 安装编译工具和相关的库文件 </span></span><br><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br><span class="line"><span class="comment"># 下载PCRE（让Nginx支持RUL地址的重定向功能）</span></span><br><span class="line">wget https://sourceforge.net/projects/pcre/files/pcre/8.41/pcre-8.41.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvzf pcre-8.41.tar.gz</span><br><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line"><span class="built_in">cd</span> pcre-8.41</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 下载安装 Nginx</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvzf nginx-1.14.0.tar.gz</span><br><span class="line"><span class="comment"># 进入安装包目录：</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.0</span><br><span class="line"><span class="comment"># 编译安装：</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/share/applications/nginx-1.14.0/ --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 启动Ngnix</span></span><br><span class="line">/usr/<span class="built_in">local</span>/share/applications/nginx-1.14.0/sbin/nginx</span><br></pre></td></tr></table></figure></div><p>接下来配置项目路径和域名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  aaa.com;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        root   项目路径1;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        # 端口代理</span><br><span class="line">        proxy_pass   http://127.0.0.1:3000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  bbb.com;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        root   项目路径2;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        # 端口代理</span><br><span class="line">        proxy_pass   http://127.0.0.1:4000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>配置完毕以后reload一下conf<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/share/applications/nginx-1.14.0/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></div></p><p>Ngnix常规操作<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dts</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 启动nginx</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/share/</span>applications/nginx<span class="number">-1.14</span><span class="number">.0</span><span class="meta-keyword">/sbin/</span>nginx</span><br><span class="line"> </span><br><span class="line"><span class="meta"># 重新载入配置文件</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/share/</span>applications/nginx<span class="number">-1.14</span><span class="number">.0</span><span class="meta-keyword">/sbin/</span>nginx -s reload </span><br><span class="line"> </span><br><span class="line"><span class="meta"># 重启 Nginx</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/share/</span>applications/nginx<span class="number">-1.14</span><span class="number">.0</span><span class="meta-keyword">/sbin/</span>nginx -s reopen      </span><br><span class="line">      </span><br><span class="line"><span class="meta"># 停止 Nginx</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/share/</span>applications/nginx<span class="number">-1.14</span><span class="number">.0</span><span class="meta-keyword">/sbin/</span>nginx -s stop</span><br></pre></td></tr></table></figure></div></p><blockquote><p>Ngnix常规选项</p><blockquote><p>配置文件路径<br>/usr/local/share/applications/nginx-1.14.0/conf<br>默认项目目录<br>/nginx-1.14.0/html</p></blockquote></blockquote><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看是否有自带的MySql库，如果先有卸载</span></span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line"><span class="comment"># 删除mysql-lib(系统自带的版本过低)</span></span><br><span class="line">yum remove mysql-libs</span><br><span class="line"><span class="comment"># 下载mysql</span></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.12-1.el6.x86_64.rpm-bundle.tar </span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf mysql-5.7.12-1.el6.x86_64.rpm-bundle.tar  </span><br><span class="line"><span class="comment"># 依次安装mysql包（common、libs、client、server）</span></span><br><span class="line">rpm -ivh mysql-community-common-5.7.12-1.el6.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.12-1.el6.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.12-1.el6.x86_64.rpm  </span><br><span class="line">rpm -ivh mysql-community-server-5.7.12-1.el6.x86_64.rpm </span><br><span class="line"><span class="comment"># 启动mysql服务</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="comment"># 查看默认密码</span></span><br><span class="line">grep <span class="string">'password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"><span class="comment"># [Note] A temporary password is generated for root@localhost: x2sX3Gb6+Dtm</span></span><br><span class="line"><span class="comment"># root@localhost: 这里后面就是默认密码</span></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 修改默认密码</span></span><br><span class="line">SET PASSWORD = PASSWORD(<span class="string">'Abcd1234.'</span>);</span><br><span class="line"><span class="comment"># ps：这里需要大小写数组字符相结合，不然会通不过</span></span><br><span class="line"><span class="comment"># 刷新系统权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 开启远程登录权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'Abcd1234.'</span> WITH GRANT OPTION;</span><br><span class="line"><span class="comment"># 刷新系统权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 接下来就可以远程登陆了</span></span><br></pre></td></tr></table></figure></div><h2 id="安装阿帕奇"><a href="#安装阿帕奇" class="headerlink" title="安装阿帕奇"></a>安装阿帕奇</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装阿帕奇</span></span><br><span class="line">yum install  httpd  -y</span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line">systemctl start httpd</span><br></pre></td></tr></table></figure></div><ol><li>添加阿帕奇工作空间<br>修改/etc/httpd/conf/httpd.conf配置文件<br>指定阿帕奇workspace为/var/www/html<br>修改前<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">apache</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Directory&gt;</span></span><br><span class="line">   <span class="attribute">AllowOverride</span> none</span><br><span class="line">   <span class="attribute">Require</span> <span class="literal">all</span> denied</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><p>修改后<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">lasso</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory <span class="string">"/var/www/html"</span>&gt;</span><br><span class="line">   AllowOverride <span class="literal">none</span></span><br><span class="line">   <span class="keyword">Require</span> <span class="literal">all</span> denied</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></div></p><ol start="2"><li><p>启动服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">crmsh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> httpd</span><br></pre></td></tr></table></figure></div></li><li><p>域名绑定<br>在/etc/httpd/conf目录下创建default.conf添加如下内容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">apache</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/var/www/html"</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">ServerName</span></span> www.lidg.vip</span><br><span class="line"><span class="section">&lt;VirtualHost&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><p>DocumentRoot:工作空间<br>ServerName：域名</p><h2 id="搭建vpn"><a href="#搭建vpn" class="headerlink" title="搭建vpn"></a>搭建vpn</h2><ol><li><p>安装wget</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure></div></li><li><p>安装setuptools</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate  http<span class="variable">s:</span>//pypi.<span class="keyword">python</span>.org/packages/<span class="keyword">source</span>/s/setuptools/setuptools-<span class="number">19.6</span>.tar.gz#md5=c607dd118eae682c44ed146367a17e26</span><br><span class="line"> </span><br><span class="line">tar -zxvf setuptools-<span class="number">19.6</span>.tar.gz</span><br><span class="line"> </span><br><span class="line"><span class="keyword">cd</span> setuptools-<span class="number">19.6</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> build</span><br><span class="line"> </span><br><span class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> install</span><br></pre></td></tr></table></figure></div></li><li><p>下载pip安装包，解压到某个位置，我这里下载的是18.1版本，然后就可以安装了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://pypi.python.org/packages/<span class="built_in">source</span>/p/pip/pip-8.0.2.tar.gz<span class="comment">#md5=3a73c4188f8dbad6a1e6f6d44d117eeb</span></span><br><span class="line"> </span><br><span class="line">tar -zxvf pip-8.0.2.tar.gz</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> pip-8.0.2</span><br><span class="line"> </span><br><span class="line">python setup.py build</span><br><span class="line"> </span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></div></li><li><p>安装shadowsocks</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmake</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure></div></li><li><p>添加shadowsocks配置文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">jboss-cli</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="string">/etc/shadowsocks/</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/etc/shadowsocks/</span></span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure></div></li></ol><p>粘贴如下内容：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>:<span class="number">1080</span>,     </span><br><span class="line">  <span class="attr">"password"</span>:<span class="string">"把这段汉字替换为你的vpn连接密码"</span>,</span><br><span class="line">  <span class="attr">"timeout"</span>:<span class="number">600</span>,    </span><br><span class="line">  <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="attr">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><ol start="6"><li>启动服务<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">pgsql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json -d <span class="keyword">start</span></span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> EC2 </tag>
            
            <tag> vpn </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedHat常规操作</title>
      <link href="/2018/09/29/RedHat%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/29/RedHat%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="RedHat设置网络开机自动连接"><a href="#RedHat设置网络开机自动连接" class="headerlink" title="RedHat设置网络开机自动连接"></a>RedHat设置网络开机自动连接</h3><ol><li><p>切换到root账户</p></li><li><p>安装网络工具</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cmake</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y net-tools\*</span><br></pre></td></tr></table></figure></div></li><li><p>使用vim修改 /etc/sysconfig/network-scripts/ifcfg-enpxxxxxx文件<br>ifcfg-enpxxxxxx文件为你的网卡名配置文件<br>将文件最后一行的ONBOOT= no改为yes，保存即可。<br>个别情况下，为了后期远程连接方便，我们可以做如下更改<br>修改上边文件 ：BOOTPROTO=static<br>同时文件的最后添加以下内容：<br>IPADDR=176.202.123.234 #静态IP<br>GATEWAY=176.202.123.1 #默认网关<br>NETMASK=255.255.255.0 #子网掩码<br>DNS1=176.202.0.227 #DNS 配置</p></li></ol><p>ps：以上参数根据自己网段设置即可</p><ol start="4"><li>设置完毕以后，重启网卡<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">routeros</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service<span class="built_in"> network </span>restart</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue移动端屏幕适配解决方案new</title>
      <link href="/2018/09/08/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88new/"/>
      <url>/2018/09/08/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88new/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目原地址参考<a href="https://github.com/Givingcode/" target="_blank" rel="noopener">这里</a></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装适配插件lib-flexible</span></span><br><span class="line">npm i lib-flexible -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装px转rem插件</span></span><br><span class="line">npm i px2rem-loader -S</span><br></pre></td></tr></table></figure></div><h2 id="文件引入"><a href="#文件引入" class="headerlink" title="文件引入"></a>文件引入</h2><p>在vue的入口文件main.js内引入lib-flexible<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">'lib-flexible/flexible.js'</span></span><br></pre></td></tr></table></figure></div></p><h2 id="添加meta标签"><a href="#添加meta标签" class="headerlink" title="添加meta标签"></a>添加meta标签</h2><p>在入口index.html内添加视口修饰meta<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="配置utils"><a href="#配置utils" class="headerlink" title="配置utils"></a>配置utils</h2><p>在build/utils.js文件内：<br>在cssLoaders里面添加px2remLoader方法用于将px转换为rem<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> px2remLoader = &#123; </span><br><span class="line">    loader: <span class="string">'px2rem-loader'</span>, </span><br><span class="line">    options: &#123; </span><br><span class="line">      <span class="string">'remUnit'</span>:<span class="number">75</span>,<span class="string">'baseDpr'</span>:<span class="number">2</span>    <span class="comment">// 设计稿width为750，因此这里是75</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></p><p>接下来将px2remLoader方法添加到generateLoaders的loaders数组内<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaders = [cssLoader, px2remLoader]</span><br></pre></td></tr></table></figure></div></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>以上几个步骤配置完毕以后，重启服务，然后组件中写尺寸单位就可以直接写px，具体值直接按照设计稿来做就ok</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue移动端屏幕适配</title>
      <link href="/2018/08/30/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
      <url>/2018/08/30/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>vue移动端屏幕适配,<a href="https://github.com/Givingcode/flexible" target="_blank" rel="noopener">查看</a>项目地址</p></blockquote><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目clone</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:NicolasGui/flexible.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> flexible</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务 localhost:8080</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div><h2 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h2><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插件一：amfe-flexible</span></span><br><span class="line">npm install amfe-flexible --save</span><br><span class="line"><span class="comment">#  插件二： node-sass</span></span><br><span class="line">npm install amfe-flexible --save  <span class="comment"># 同时，在main.js文件内引入</span></span><br><span class="line">npm install sass-loader --save</span><br></pre></td></tr></table></figure></div><h3 id="编写js处理方法"><a href="#编写js处理方法" class="headerlink" title="编写js处理方法"></a>编写js处理方法</h3><p>在utils目录下创建flex.js文件，内容如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">Vue.prototype.$setTitle = <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.title = text</span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype.$getPX = <span class="function"><span class="keyword">function</span> (<span class="params">design, designWidth = <span class="number">750</span></span>) </span>&#123; <span class="comment">// 750为设计稿宽度</span></span><br><span class="line">  <span class="comment">// 获取窗口尺寸</span></span><br><span class="line">  <span class="keyword">let</span> width = <span class="built_in">document</span>.documentElement.getBoundingClientRect().width</span><br><span class="line">  <span class="comment">// 计算缩放比例</span></span><br><span class="line">  <span class="keyword">let</span> scale = width / designWidth</span><br><span class="line">  <span class="comment">// 获取实时尺寸</span></span><br><span class="line">  <span class="keyword">return</span> design * scale</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>同时，在main.js文件内引入该js文件<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'amfe-flexible'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./utils/flex'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h3 id="编写css处理方法"><a href="#编写css处理方法" class="headerlink" title="编写css处理方法"></a>编写css处理方法</h3><p>在src目录创建styles目录，同时在该目录新增common.scss文件，内容如下：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scss</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">li</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">p</span>,<span class="selector-tag">form</span>,<span class="selector-tag">iframe</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">a</span>,<span class="selector-tag">span</span>,<span class="selector-tag">em</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">img</span>,<span class="selector-tag">html</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">header</span>,<span class="selector-tag">article</span>,<span class="selector-tag">button</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">var</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.2rem</span> <span class="string">"Microsoft YaHei"</span>,tahoma,arial,sans-serif;<span class="attribute">min-width</span>:<span class="number">320px</span>;<span class="attribute">position</span>:relative; &#125;</span><br><span class="line"><span class="selector-tag">form</span>,<span class="selector-tag">input</span> &#123;<span class="attribute">background</span>:none;<span class="attribute">border</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">ol</span> &#123;<span class="attribute">list-style-type</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.2rem</span> <span class="string">"Microsoft YaHei"</span>,arial,tahoma; &#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123; <span class="attribute">outline</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">strong</span>,<span class="selector-tag">b</span> &#123; <span class="attribute">font-weight</span>:normal; &#125;</span><br><span class="line"><span class="selector-tag">em</span>,<span class="selector-tag">i</span>,<span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">text-indent</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.clear</span> &#123; <span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">width</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; <span class="attribute">clear</span>:both;<span class="attribute">content</span>:<span class="string">"."</span>;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">0</span>;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">visibility</span>:hidden; &#125;</span><br><span class="line">  <span class="comment">// 尺寸转换</span></span><br><span class="line">  <span class="keyword">@function</span> px2rem(<span class="variable">$px</span>, <span class="variable">$base-font-size</span>: <span class="number">75px</span>) &#123; <span class="comment">/*设计稿宽度为750，因此此处为75*/</span></span><br><span class="line">    <span class="keyword">@if</span> (unitless(<span class="variable">$px</span>)) &#123;</span><br><span class="line">      <span class="keyword">@return</span> px2rem(<span class="variable">$px</span> + <span class="number">0px</span>); </span><br><span class="line">    &#125; <span class="keyword">@else</span> if (unit(<span class="variable">$px</span>) == rem) &#123;</span><br><span class="line">      <span class="keyword">@return</span> <span class="variable">$px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="variable">$base-font-size</span>) * <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 字体转换</span></span><br><span class="line">  <span class="keyword">@mixin</span> font-dpr(<span class="variable">$font-size</span>) &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line">    <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="variable">$font-size</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-attr">[data-dpr="3"]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="variable">$font-size</span> * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="css内使用"><a href="#css内使用" class="headerlink" title="css内使用"></a>css内使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scss</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang='scss'&gt;</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">'../styles/common.scss'</span>;</span><br><span class="line">    <span class="selector-class">.content</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>:px2rem(<span class="number">750</span>);  <span class="comment">/*750为设计稿实际尺寸*/</span></span><br><span class="line">      <span class="attribute">font-size</span>:px2rem(<span class="number">20</span>)  /*<span class="number">20</span>为设计稿实际尺寸*/</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div><h3 id="js内使用"><a href="#js内使用" class="headerlink" title="js内使用"></a>js内使用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   name:<span class="string">'test'</span>,</span><br><span class="line">   data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       w:<span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   watch:&#123;</span><br><span class="line">     getWidth() &#123;</span><br><span class="line">         <span class="keyword">this</span>.w=<span class="keyword">this</span>.$getPX(<span class="number">500</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   computed: &#123;</span><br><span class="line">     fun() &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">this</span>.w/<span class="keyword">this</span>.$getPX(<span class="number">500</span>)*<span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">''</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC升级Python3.x</title>
      <link href="/2018/02/05/MAC%E5%8D%87%E7%BA%A7Python3.x/"/>
      <url>/2018/02/05/MAC%E5%8D%87%E7%BA%A7Python3.x/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>mac自带Python为2.7，如何升级自带版本，其实这个问题网上争议比较大，有大神删除自带python重新安装的，但是个人建议保留自带Python，通过brew安装，开发测试两不误，操作如下：</p><h3 id="查看Python版本"><a href="#查看Python版本" class="headerlink" title="查看Python版本"></a>查看Python版本</h3><p>首先python -V得到当前系统版本是2.7.10，然后通过brew安装，不知道brew的自行度娘</p><h3 id="brew命令"><a href="#brew命令" class="headerlink" title="brew命令"></a>brew命令</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br></pre></td></tr></table></figure></div><p>之后的话呢可能报错<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">subunit</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error: </span>An unexpected error occurred during the `brew link` step</span><br><span class="line">The formula built, but is not symlinked into /usr/local</span><br><span class="line">Permission denied - /usr/local/Frameworks</span><br><span class="line"><span class="keyword">Error: </span>Permission denied - /usr/local/Frameworks</span><br></pre></td></tr></table></figure></div></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>查看了日志发现/usr/local/下没有路径/usr/local/Frameworks ，所以先创建一个目录，<br>执行<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">maxima</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/<span class="built_in">local</span>/Frameworks</span><br></pre></td></tr></table></figure></div></p><p>然后修改一下权限<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">elixir</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown <span class="variable">$(</span>whoami)<span class="symbol">:admin</span> /usr/local/Frameworks</span><br></pre></td></tr></table></figure></div></p><p>接下来再link一下<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">armasm</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>link python3</span><br></pre></td></tr></table></figure></div></p><p>提示<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">angelscript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linking /usr/local/Cellar/python3/<span class="number">3.6</span><span class="number">.3</span>... <span class="number">1</span> symlinks created</span><br></pre></td></tr></table></figure></div></p><p>代表成功了，此时我们python -V发现结果还是2.7.10,啥原因呢？系统默认选择了自带的python，解决很简单，把常规python命令换成python3，比如：python3 -V</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mac自带阿帕奇</title>
      <link href="/2017/02/24/%E4%BD%BF%E7%94%A8mac%E8%87%AA%E5%B8%A6%E9%98%BF%E5%B8%95%E5%A5%87/"/>
      <url>/2017/02/24/%E4%BD%BF%E7%94%A8mac%E8%87%AA%E5%B8%A6%E9%98%BF%E5%B8%95%E5%A5%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Apache对于前端程序员来说是必不可少的一款web服务器，Mac系统自身带了apache，可以直接用来搭建本地web服务器，配置过程相对比较简单，本文将做简要描述，开始吧</p><h3 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h3><p>mac是默认自动启动Apache的，判断mac是否启动了Apache很简单，浏览器地址栏输入<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>   回车即可，如果页面显示It works！证明ok，介绍几个常用命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start   //开启apache</span><br><span class="line"></span><br><span class="line">sudo apachectl restart   //重启apache</span><br><span class="line"></span><br><span class="line">sudo apachectl stop    //关闭apache:</span><br></pre></td></tr></table></figure></div><h3 id="php版本检查"><a href="#php版本检查" class="headerlink" title="php版本检查"></a>php版本检查</h3><p>在新的Mac High Sierra中对php版本进行了升级，所以先确定你mac的php版本<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ebnf</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">php -v</span></span><br></pre></td></tr></table></figure></div></p><p>如果提示PHP 7.1.7 (cli) (built: Jul 15 2017 18:08:09) ( NTS )，则代表php是7.x版本的</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>ps：在进行一下操作时候，先在终端执行sudo apachectl stop停止apache服务</p><h4 id="更改work-space"><a href="#更改work-space" class="headerlink" title="更改work space"></a>更改work space</h4><p>Apache在Windows下默认work space为htdocs，在mac下有所区别，路径为：/Library/WebServer/Documents<br>因此我们需要把前端代码拷贝到该目录进行测试，但是该目录藏这么深在实际使用过程中显然是比较麻烦的，因此接下来我们通过修改阿帕奇主配置文件httpd.conf来指定work space，步骤如下：<br>mac配置文件目录为：/etc ，默认是隐藏的，因此咱们在终端里面执行：open /etc/apache2/  就可以打开Apache主目录，找到httpd.conf文件，使用文本编辑器打开该文件， 如果不想那么麻烦的话可以使用vi编辑，命令如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apache2/httpd.conf</span><br></pre></td></tr></table></figure></div><p>接下来按一下键盘上的i键，底部提示insert……便可以移动光标进行编辑了<br>编辑以下内容，原本为：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot <span class="string">"/Library/WebServer/Documents"</span></span><br><span class="line">&lt;Directory <span class="string">"/Library/WebServer/Documents"</span>&gt;</span><br></pre></td></tr></table></figure></div></p><p>修改为自定义目录，比如我改成根目录的sites文件夹，那就是：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot <span class="string">"/Users/用户名/Sites"</span></span><br><span class="line">&lt;Directory <span class="string">"/Users/用户名/Sites"</span>&gt;</span><br></pre></td></tr></table></figure></div></p><p>ps:用户名即你mac的用户名，比如我的用户名是nicolas，那改制后应该是：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot <span class="string">"/Users/nicolas/Sites"</span></span><br><span class="line">&lt;Directory <span class="string">"/Users/nicolas/Sites"</span>&gt;</span><br></pre></td></tr></table></figure></div></p><p>这样子的话我们就可以把Apache的work space更改到根路径下的sites了</p><h4 id="更改默认端口"><a href="#更改默认端口" class="headerlink" title="更改默认端口"></a>更改默认端口</h4><p>跟更改默认工作空间一样的方式打开httpd.conf，找到Listen 80这一行，将80改为你需要的端口就好</p><h4 id="显示文件目录"><a href="#显示文件目录" class="headerlink" title="显示文件目录"></a>显示文件目录</h4><p>Apache在没有index的情况下默认不会显示文件目录，可以通过修改httpd.conf实现文件列表的展示，方便调试操作如下：<br>将httpd.conf里面Options FollowSymLinks Multiviews之后加上Indexes，修改之后为<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Options FollowSymLinks Multiviews Indexes</span><br></pre></td></tr></table></figure></div></p><h4 id="添加php7的支持"><a href="#添加php7的支持" class="headerlink" title="添加php7的支持"></a>添加php7的支持</h4><p>在里面找到<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">apache</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#LoadModule php7_module libexec/apache2/libphp7.so</span></span><br></pre></td></tr></table></figure></div></p><p>删除前面的#，修改之后是<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">smali</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php7_module libexec/apache2/libphp7.so</span><br></pre></td></tr></table></figure></div></p><p>接下来修改修改servername（必要操作，否则会报错）<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">apache</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ServerAdmin you@example.com</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">ServerName</span></span> localhost</span><br></pre></td></tr></table></figure></div></p><p>以上操作都完成以后，按下   esc   ，输入  :wq  然后回车<br>紧接着在终端sudo apachectl start即可</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
